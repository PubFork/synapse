<shared_ptr>
	<id>1</id>
	<type>
		<string>reno_project</string>
	</type>
	<object>
		<reno_project>
			<config>
				<shared_ptr>
					<id>2</id>
					<type>
						<string>reno_config</string>
					</type>
					<object>
						<source>
							<string>../../include;../../src;../../example</string>
						</source>
						<match>
							<string>.*\.(cpp|hpp|h)$</string>
						</match>
					</object>
				</shared_ptr>
			</config>
			<layers>
				<shared_ptr>
					<id>3</id>
					<type>
						<string>reno_layer_map</string>
					</type>
					<object>
						<sorted>
							<size>7</size>
							<pair>
								<string>default</string>
								<shared_ptr>
									<id>4</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>42</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>5</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>6523BDA3D191FBCFAB1A6E87A70555C32B1CA614203831AD33B9A4966CD2BACC</strong>
																		<weak>1731899969</weak>
																		<size>7769</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\emit.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/emit.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>6</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Signal</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>7</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>B95C26B84ADF1D874639CCD0A55F89EABB6F062C522E3A0BB0D3A2C030D96BB8</strong>
																		<weak>2848284123</weak>
																		<size>360</size>
																		<position>417</position>
																		<strong>FABECA297659F3A16F0D9C7A3827E5A556FD562286AD57DEE870EB96C481379F</strong>
																		<weak>577918439</weak>
																		<size>332</size>
																		<position>23</position>
																		<strong>29C4AA90E6292B0AFBA4C749F88054FD5EB21C3D403A4A606172580A32762AB0</strong>
																		<weak>3067366167</weak>
																		<size>286</size>
																		<position>37</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\blocker.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>blocker</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>8</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Index of types</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>9</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>0C0E49AE2690008106DBBD734E5B51BCE4C5794658B05187FD15712179DFA96D</strong>
																		<weak>2528774688</weak>
																		<size>1639</size>
																		<position>743</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\qt\qt_button.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>using meta signals with QPushButton</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>10</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>CEF10F6B4AEEAA8DDCFE231D0BDDAAE0227A783FAE75416E2E1DE1242D57F5CE</strong>
																		<weak>3406893859</weak>
																		<size>2826</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\signal_traits.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/signal_traits.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>11</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>FE605B6C7B2776B3DA03BD90341F3EA017368E3B9F9EBC1EF06538D3E10BBB17</strong>
																		<weak>412790480</weak>
																		<size>2518</size>
																		<position>517</position>
																		<strong>3E0E4C56318057AB2BFE92CC4EC4D4ABE587CDCD907B75EECE3025219965E683</strong>
																		<weak>1236510428</weak>
																		<size>2490</size>
																		<position>23</position>
																		<strong>9DD7A04187DC80457C97CD89F9051BB3B7B935511BA44C973A9D90CD62DA6789</strong>
																		<weak>2087926509</weak>
																		<size>2090</size>
																		<position>37</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\signal_traits.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>signal_traits</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>12</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>C62798EE9AD78E893B735CA424E157B4429CBED44E281A26C39EB94083E055FB</strong>
																		<weak>1905580406</weak>
																		<size>3886</size>
																		<position>626</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\qt\qt_meta_block.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>using meta signals to respond to signals being blocked or unblocked</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>13</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Index of headers</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>14</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>56583AA8F31389EC97F4D0495FC152D9CDBB1AC668DC93A6F5F636E354D74426</strong>
																		<weak>992644081</weak>
																		<size>506</size>
																		<position>409</position>
																		<strong>48CDCAAA9A1531EFDEDF57015DAD6C1C9D28681EEF0A3A734E3D65AAE4AA1154</strong>
																		<weak>2888401917</weak>
																		<size>478</size>
																		<position>23</position>
																		<strong>6FF116F68EDFC6D78ECEA4738F4C48FC47C965C6500F6637E6A79EF0C3732033</strong>
																		<weak>671971629</weak>
																		<size>432</size>
																		<position>37</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connection</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>15</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>6C5E76A6F2DC66363F4BF5055813CE9AFCBE6F25DD60A91D7105C4D3D149A883</strong>
																		<weak>3544852464</weak>
																		<size>1193</size>
																		<position>949</position>
																		<strong>6591837D106941FB6EFFC8D07CB3376C7FA2107531FE989A4BFAA4E5ED33324F</strong>
																		<weak>105652220</weak>
																		<size>1165</size>
																		<position>23</position>
																		<strong>FF986FDDCA3229867121CD0EC7455E73EE003E062BCC9F8FB4B161D18A236396</strong>
																		<weak>2501201157</weak>
																		<size>269</size>
																		<position>717</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connection::get_user_data</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>16</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>D5439F3485661082195929C39639B58C4857D3D3DCB757D4D72EFF85C2231ECA</strong>
																		<weak>2344619350</weak>
																		<size>7561</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\translate.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/translate.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>17</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>32E9802FDB86BEC83A95A6B43A74009E834500D1F0D09CCB89B104B1FDDDF6A4</strong>
																		<weak>1166458703</weak>
																		<size>1470</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\callback_api\synapsify.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>using meta signals to connect to a C-style callback API</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>18</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>8428D66EC4651D0F45C12C24AE0CCCDDFBCF3E2730CAE383A84DBDEDE40FDFDB</strong>
																		<weak>3048070757</weak>
																		<size>14331</size>
																		<position>431</position>
																		<strong>47D51CDD5357B4ECC3A088E09E4F13D1B8E15FB7DC79BDCA9B7F8183B7070ED4</strong>
																		<weak>856151665</weak>
																		<size>14303</size>
																		<position>23</position>
																		<strong>744CC5F03F6D21A472683AB8D34D1B63623DB82A6DFF4B3F14695DD522305BEA</strong>
																		<weak>2976067040</weak>
																		<size>157</size>
																		<position>14025</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\src\thread_local_queue.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>create_thread_local_queue</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>19</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>43F005A40F51D63A6A7C38AAD2A964B2E9A234416950F1C82995DAB668374614</strong>
																		<weak>2271892227</weak>
																		<size>2623</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\logger\logger.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>building a simple logging system</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>20</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Synopsis</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>21</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>6C5E76A6F2DC66363F4BF5055813CE9AFCBE6F25DD60A91D7105C4D3D149A883</strong>
																		<weak>3544852464</weak>
																		<size>1193</size>
																		<position>949</position>
																		<strong>6591837D106941FB6EFFC8D07CB3376C7FA2107531FE989A4BFAA4E5ED33324F</strong>
																		<weak>105652220</weak>
																		<size>1165</size>
																		<position>23</position>
																		<strong>9E2DAD7B5FD60650F9F549C6D9B2D6FA57EEB55BCBFB5182EEA13A721EB1B1C6</strong>
																		<weak>1636776058</weak>
																		<size>207</size>
																		<position>510</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connection::set_user_data</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>22</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>0DE0EC05E3CF38F783C01C9DD1CF5FF111A28C68C800D136743E5027C6E76AD3</strong>
																		<weak>1015613561</weak>
																		<size>894</size>
																		<position>417</position>
																		<strong>89B515CC017FF2CD123113BDC1C631BED3571383A4F3A692773F28CEB67DAA64</strong>
																		<weak>1126432901</weak>
																		<size>866</size>
																		<position>23</position>
																		<strong>5D7E1E3B88F7A14D6EF7E4D935D88BA44EC13257AA433326ABBC20FE2BACD7B0</strong>
																		<weak>1261320827</weak>
																		<size>249</size>
																		<position>608</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\block.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>meta::blocked</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>23</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>8428D66EC4651D0F45C12C24AE0CCCDDFBCF3E2730CAE383A84DBDEDE40FDFDB</strong>
																		<weak>3048070757</weak>
																		<size>14331</size>
																		<position>431</position>
																		<strong>47D51CDD5357B4ECC3A088E09E4F13D1B8E15FB7DC79BDCA9B7F8183B7070ED4</strong>
																		<weak>856151665</weak>
																		<size>14303</size>
																		<position>23</position>
																		<strong>6812FEAEF4EDA3DBC98EAD484EE20C5AF8AC15582D8286C47964FB485BAA2026</strong>
																		<weak>554769116</weak>
																		<size>112</size>
																		<position>14182</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\src\thread_local_queue.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>poll</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>24</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>D02A7E77C8E2C4AB9D697012E9371E0AA62C4ACC08F115E111EA1BF6C92330A4</strong>
																		<weak>2209823914</weak>
																		<size>6567</size>
																		<position>1411</position>
																		<strong>2EA2A187A019B693D6F50839434DC588B3746B4D189690442831625D95D57F04</strong>
																		<weak>3610719414</weak>
																		<size>6539</size>
																		<position>23</position>
																		<strong>1CDC896A7D78E2FB3BFEEBE44178CEE95D80B1C97D42ACD813B1A2B26A4BF7C2</strong>
																		<weak>1098320166</weak>
																		<size>1689</size>
																		<position>4840</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\emit.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>emit</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>25</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>0D03FDCF42FBB688D3D660DD0F375841B4A38E73649F21EFDFF81AC3A8597662</strong>
																		<weak>2197749326</weak>
																		<size>1933</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/connection.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>26</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>01C7065919AE94CD44E819D5D6D4FB42E164920EEF50AD80C298EB97848E96CA</strong>
																		<weak>3044633644</weak>
																		<size>364</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\thread_local_queue.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/thread_local_queue.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>27</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Examples</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>28</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>5F5CCEA3127C9A9F407A3E8A8B427377F1C266632BDCCCA6C2070FEB8E0617F0</strong>
																		<weak>3958246451</weak>
																		<size>3429</size>
																		<position>468</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\win\win_WindowProc.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>handling events from an OS message pump</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>29</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>EE925A185A514AE031555BD6988E9236F20833CD2F647E2F59D472ED05A7EA71</strong>
																		<weak>3127568495</weak>
																		<size>843</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\blocker.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/blocker.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>30</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>BF6FB1CD96D3B5352B4F7C5B60417D12D87ED82E67F5EB7AEA0E2031A13D41A6</strong>
																		<weak>501991863</weak>
																		<size>1328</size>
																		<position>348</position>
																		<strong>0F62CD540F4AE2D2D21A26273672EEF5095115AD94D2E7827A8EC4B84FD9374C</strong>
																		<weak>3746087363</weak>
																		<size>1300</size>
																		<position>23</position>
																		<strong>CB60F1646E83BEFA50F9309A24F075B5670136F4BFB1A097FEE5F9F8FC3F8199</strong>
																		<weak>554350323</weak>
																		<size>1254</size>
																		<position>37</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\translate.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>translate</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>31</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>interthread communication support</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>32</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Index of functions</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>33</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Boost Synapse</string>
															</title>
															<file_name>
																<string>index</string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>34</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>FC496AB68117923B42362965B8BE49E5F296F1392A0F6A730EB4B637A611C406</strong>
																		<weak>711040374</weak>
																		<size>3861</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connect.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/connect.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>35</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>2EB95911340109AC66902D36226963283EC0E2D336CB19B96B9A74757A566D71</strong>
																		<weak>1800028057</weak>
																		<size>2773</size>
																		<position>217</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\block.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/block.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>36</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Building</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>37</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>6C5E76A6F2DC66363F4BF5055813CE9AFCBE6F25DD60A91D7105C4D3D149A883</strong>
																		<weak>3544852464</weak>
																		<size>1193</size>
																		<position>949</position>
																		<strong>6591837D106941FB6EFFC8D07CB3376C7FA2107531FE989A4BFAA4E5ED33324F</strong>
																		<weak>105652220</weak>
																		<size>1165</size>
																		<position>23</position>
																		<strong>0693A3806DF544D3052F144C6B870687B59C19327B4AE62E3CE9AA980A2920B3</strong>
																		<weak>3167300470</weak>
																		<size>169</size>
																		<position>986</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connection::emitter</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>38</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>4</size>
																		<strong>B2A162F5C5320B046784A19C268B969B2A30AA397FDD08DDEFBD267FAAEAFFB8</strong>
																		<weak>1189655063</weak>
																		<size>1448</size>
																		<position>400</position>
																		<strong>66967F26A1FCC712BC1FCD8A79B22C887041ED8F7866A7DEF1FF5CA54BBCD175</strong>
																		<weak>1458416163</weak>
																		<size>1420</size>
																		<position>23</position>
																		<strong>74621BE96E25F54775629D18A6AF866BA55994DF6B9DD7F5B9D23989F4D6505E</strong>
																		<weak>1353223946</weak>
																		<size>551</size>
																		<position>860</position>
																		<strong>AEA004D825B782299D8496BA361CD6D7F94A9EAB579796DC0ED7B6BD7D98425E</strong>
																		<weak>2359899403</weak>
																		<size>204</size>
																		<position>334</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connect.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>meta::connected</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>39</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>29B77E2347106D04911D19607A7FC0F7251D69D633DECC1FE465E2F6CF2D73D3</strong>
																		<weak>1983179288</weak>
																		<size>1637</size>
																		<position>1345</position>
																		<strong>2A55A60442043EC3325EAFB18DA4CE02014F22706372BC9FA022BCD2B96DCADA</strong>
																		<weak>423289380</weak>
																		<size>1609</size>
																		<position>23</position>
																		<strong>CF9F97D2C2BE665EFBF1D9FA027D4226C8A4FE54DCE5E0764C82FEEF5FCDAF8F</strong>
																		<weak>2678070751</weak>
																		<size>910</size>
																		<position>689</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\block.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>block</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>40</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Tutorial</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>41</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Index of meta signals</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>42</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>questions and answers</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>43</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>5</size>
																		<strong>B2A162F5C5320B046784A19C268B969B2A30AA397FDD08DDEFBD267FAAEAFFB8</strong>
																		<weak>1189655063</weak>
																		<size>1448</size>
																		<position>400</position>
																		<strong>66967F26A1FCC712BC1FCD8A79B22C887041ED8F7866A7DEF1FF5CA54BBCD175</strong>
																		<weak>1458416163</weak>
																		<size>1420</size>
																		<position>23</position>
																		<strong>74621BE96E25F54775629D18A6AF866BA55994DF6B9DD7F5B9D23989F4D6505E</strong>
																		<weak>1353223946</weak>
																		<size>551</size>
																		<position>860</position>
																		<strong>F269835FB1B3D292D3EC9593A2C77075EB374DEFA5B19EF02296DD0CE8431B96</strong>
																		<weak>1693863563</weak>
																		<size>288</size>
																		<position>46</position>
																		<strong>659B4B51C98C68DAE7BEC98106A757873659EF590CEE20D7040AE02DE6546AAD</strong>
																		<weak>611192271</weak>
																		<size>46</size>
																		<position>1</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connect.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>meta::emitter</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>44</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>B80A94A0A99B4B6BD92DE6478A83DFBC07112005C197E13A40E4AD0163A25761</strong>
																		<weak>2307084574</weak>
																		<size>1848</size>
																		<position>670</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\qt\qt_custom_signals.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>adding custom signals to Qt objects without MOCing</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>45</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>4</size>
																		<strong>B95C26B84ADF1D874639CCD0A55F89EABB6F062C522E3A0BB0D3A2C030D96BB8</strong>
																		<weak>2848284123</weak>
																		<size>360</size>
																		<position>417</position>
																		<strong>FABECA297659F3A16F0D9C7A3827E5A556FD562286AD57DEE870EB96C481379F</strong>
																		<weak>577918439</weak>
																		<size>332</size>
																		<position>23</position>
																		<strong>29C4AA90E6292B0AFBA4C749F88054FD5EB21C3D403A4A606172580A32762AB0</strong>
																		<weak>3067366167</weak>
																		<size>286</size>
																		<position>37</position>
																		<strong>F67DCA4DD04A884B88C9E2C7EB4A9FF32CD91D3BE7FB2978ACC345C4BFFC5866</strong>
																		<weak>603329297</weak>
																		<size>62</size>
																		<position>210</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\blocker.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>blocker::emitter</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>46</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>D3047C9C93BEB5A056747D0E9086F87BB3CA98EE625BA732918DEC00B7A476C3</strong>
																		<weak>3244532941</weak>
																		<size>2188</size>
																		<position>1882</position>
																		<strong>24EF440227F7A952D4CAC3BE68B908B1A47F12982C018FAAF6A02372E4F8E2D7</strong>
																		<weak>470850777</weak>
																		<size>2160</size>
																		<position>23</position>
																		<strong>DE916ADD42CE8F1645C8D5B68914EB19D0AC872EACC6026266EFDE095609772F</strong>
																		<weak>14906591</weak>
																		<size>1138</size>
																		<position>1012</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connect.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connect</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>def</string>
								<shared_ptr>
									<id>47</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>42</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>[@class&#10;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;    {&#10;    protected:&#10;&#10;    blocker();&#10;    ~blocker();&#10;&#10;    public:&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl pre_indent=&quot;4&quot;:)&#10;    };@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>[@template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;struct&#10;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;    {&#10;    static int const arity=&lt;N&gt;;&#10;    typedef &lt;A1&gt; arg1_type;&#10;    typedef &lt;A2&gt; arg2_type;&#10;    ....&#10;    typedef &lt;A&lt;N&gt;&gt; argN_type;&#10;    typedef void (*signature)(arg1_type,arg2_type,....,argN_type);&#10;    };@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>9</size>
												<variant>2</variant>
												<string>[@class&#10;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;    {&#10;    protected:&#10;&#10;    connection();&#10;    ~connection();&#10;&#10;    public:&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl pre_indent=&quot;4&quot;:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def pre_indent=&quot;4&quot;:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def pre_indent=&quot;4&quot;:)&#10;&#10;    };@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt;&#10;T * (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)() const;@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt;&#10;void (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)( shared_ptr&lt;T&gt; const &amp; data );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>7</size>
												<variant>2</variant>
												<string>[@template &lt;class Signal&gt;&#10;struct&#10;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&#10;    {&#10;    typedef (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;Signal&gt;(*type)( (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; eb, bool is_blocked );&#10;    };@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>7</size>
												<variant>2</variant>
												<string>[@namespace&#10;connect_flags&#10;    {&#10;    unsigned const connecting=1;&#10;    unsigned const first_for_this_emitter=2;&#10;    unsigned const last_for_this_emitter=4;&#10;    }&#10;&#10;template &lt;class Signal&gt;&#10;struct&#10;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&#10;    {&#10;    typedef (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;Signal&gt;(*type)( (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; c, unsigned flags );&#10;    };@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>api</string>
								<shared_ptr>
									<id>48</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>42</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>9</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;namespace&#10;meta&#10;    {&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl pre_indent=&quot;4&quot;:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def pre_indent=&quot;4&quot;:)&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>7</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>decl</string>
								<shared_ptr>
									<id>49</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>42</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>[@--user-defined--@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:);@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:);@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt; T * (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)() const; </string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@shared_ptr&lt;thread_local_queue&gt;&#10;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>();@]</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt; void (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)( T const &amp; data ); </string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@int </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>( thread_local_queue &amp; q );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>13</size>
												<variant>2</variant>
												<string>[@template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;int (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( void const * e, [(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;::arg1_type a1 [,(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;::arg2_type a2...]] );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>25</size>
												<variant>2</variant>
												<string>[@template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;OriginalEmitter&gt; const &amp; original_emitter, void const * translated_emitter,&#10;    weak_ptr&lt;void const&gt; const &amp; connection_lifetime=weak_ptr&lt;void const&gt;() );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;OriginalEmitter&gt; const &amp; original_emitter, void const * translated_emitter,&#10;    weak_ptr&lt;void const&gt; const &amp; connection_lifetime=weak_ptr&lt;void const&gt;() );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( OriginalEmitter * original_emitter, void const * translated_emitter,&#10;    weak_ptr&lt;void const&gt; const &amp; connection_lifetime=weak_ptr&lt;void const&gt;() );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt;&#10;shared_ptr&lt;T&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)() const;@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>19</size>
												<variant>2</variant>
												<string>[@template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:), class Emitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;Emitter&gt; const &amp; e );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:), class Emitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;Emitter&gt; const &amp; e );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:), class Emitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( Emitter * e );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@shared_ptr&lt;void const&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)();</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt;&#10;shared_ptr&lt;T&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)() const;@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>31</size>
												<variant>2</variant>
												<string>[@template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;Emitter&gt; const &amp; e, function&lt;typename (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;::signature&gt; const &amp; f,&#10;    weak_ptr&lt;void const&gt; const &amp; connection_lifetime=weak_ptr&lt;void const&gt;() );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;Emitter&gt; const &amp; e, function&lt;typename (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;::signature&gt; const &amp; f,&#10;    weak_ptr&lt;void const&gt; const &amp; connection_lifetime=weak_ptr&lt;void const&gt;() );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( Emitter * e, function&lt;typename (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;::signature&gt; const &amp; f,&#10;    weak_ptr&lt;void const&gt; const &amp; connection_lifetime=weak_ptr&lt;void const&gt;() );@]&#10;</string>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>include</string>
								<shared_ptr>
									<id>50</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>42</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>7</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;In &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; different signals are identified by different user-defined pointer-to-function types. The return type of such signal typedefs is used to identify the signal. This is possible because the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; interface ignores the return value of any connected function object. The arity and the argument types of a signal typedef are used to automatically bind the correct &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; overload during overload resolution.&#10;&#10;For example, the following typedef defines a &apos;&apos;mouse_move&apos;&apos; signal that takes two integers. The &apos;&apos;mouse_move_&apos;&apos; struct is not a &quot;real&quot; type: its only purpose is to identify the signal and so it&apos;s declared inline and left incomplete:&#10;&#10;[@typedef struct mouse_move_(*mouse_move)( int x, int y );@]&#10;&#10;Of course the typedef itself—in this case &apos;&apos;mouse_move&apos;&apos;, not &apos;&apos;mouse_move_&apos;&apos;—is used to refer to the defined signal.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>13</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;The &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function returns &apos;&apos;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) const&gt;&apos;&apos; that is used to control time the signal remains blocked. As well, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; objects are passed to handlers of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; signal, which can use the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&apos;&apos; member function template to access the emitter object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;type&quot; except_tags=&quot;noindex&quot; fmt=&quot;index&quot;:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>45</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;This program demonstrates how meta signals can be used to connect native Qt signals through the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; interface.&#10;&#10;When the user calls &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;&apos;&apos; passing a QPushButton, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;&apos;&apos; signal from the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. The &apos;&apos;handle_button_clicked_connected_meta_signal&apos;&apos; function responds to this meta signal by connecting (or disconnecting) the Qt-native &apos;&apos;QPushButton::clicked&apos;&apos; signal to the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;&apos;&apos; function.&#10;&#10;[@#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#define QT_NO_EMIT //Suppress the #define emit from Qt since it clashes with synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>.&#10;#include &lt;QtWidgets/QApplication&gt;&#10;#include &lt;QtWidgets/QDialog&gt;&#10;#include &lt;QtWidgets/QPushButton&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;    {&#10;    //Define a Boost Synapse signal&#10;    typedef struct button_clicked_(*button_clicked)();&#10;&#10;    //Connect the QPushButton::clicked Qt signal to synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt;.&#10;    //Store the QMetaObject::Connection object into the synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> object.&#10;    boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; meta_conn=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt; &gt;(&#10;        synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>(),&#10;        [ ]( synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> &amp; c, unsigned flags )&#10;            {&#10;            if( flags&amp;synapse::meta::connect_flags::connecting )&#10;                {&#10;                QPushButton * pb=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QPushButton&gt;().get();&#10;                c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)( QObject::connect( pb, &amp;QPushButton::clicked, [pb]() { synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt;(pb); } ) );&#10;                }&#10;            else&#10;                QObject::disconnect(*c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QMetaObject::Connection&gt;());&#10;            } );&#10;    }&#10;&#10;int&#10;main( int argc, char const * argv[ ] )&#10;    {&#10;    QApplication app(argc,(char * *)argv);&#10;    QDialog qd;&#10;    qd.setGeometry(QRect(QPoint(200,200),QSize(300,100)));&#10;    boost::shared_ptr&lt;QPushButton&gt; pb(new QPushButton(&quot;OK&quot;,&amp;qd));&#10;&#10;    //accept() the QDialog when pb is clicked.&#10;    boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; c=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt;( pb, [&amp;qd]() { qd.accept(); } );&#10;&#10;    qd.exec();&#10;    return 0;&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>11</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;This template is partially-specialized for pointer-to-function objects (and meta signal types) but is left undefined for any other value of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; argument. In &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; pointers-to-functions are used to identify (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;p&quot;:). Note that the &apos;&apos;signature&apos;&apos; return type is void, since values returned by any (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|connected:) function objects are ignored by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>63</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;In &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|signals:) can be disabled by calling the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function. When a &apos;&apos;Signal&apos;&apos; becomes blocked, the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;Signal&gt;&apos;&apos; meta signal. By connecting the meta signal we can take action whenever signals are blocked or unblocked.&#10;&#10;This program demonstrates how this can be used to automatically disable/enable buttons in response to the &apos;&apos;button_clicked&apos;&apos; signal being blocked/unblocked.&#10;&#10;[@#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#define QT_NO_EMIT //Suppress the #define emit from Qt since it clashes with synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>.&#10;#include &lt;QtWidgets/QApplication&gt;&#10;#include &lt;QtWidgets/QDialog&gt;&#10;#include &lt;QtWidgets/QPushButton&gt;&#10;#include &lt;QtWidgets/QCheckBox&gt;&#10;#include &lt;QtWidgets/QBoxLayout&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;    {&#10;    //Define a Boost Synapse signal&#10;    typedef struct button_clicked_(*button_clicked)();&#10;&#10;    //When the button_clicked is being connected, connect the QPushButton::clicked Qt signal to&#10;    //synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt; and store the resulting QMetaObject::Connection object&#10;    //into the synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> object. When disconnecting, disconnect the stored&#10;    //QMetaObject::Connection object.&#10;    boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; meta_conn=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt; &gt;(&#10;        synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>(),&#10;        [ ]( synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> &amp; c, unsigned flags )&#10;            {&#10;            if( flags&amp;synapse::meta::connect_flags::connecting )&#10;                {&#10;                QPushButton * pb=c.emitter&lt;QPushButton&gt;().get();&#10;                c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)( QObject::connect( pb, &amp;QPushButton::clicked, [pb]() { synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt;(pb); } ) );&#10;                }&#10;            else&#10;                QObject::disconnect(*c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QMetaObject::Connection&gt;());&#10;            } );&#10;&#10;    //Whenever the button_clicked signal is blocked, disable the button. Enable when unblocked.&#10;    boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; meta_block=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt; &gt;(&#10;        synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>(),&#10;        [ ]( synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> &amp; b, bool blocked )&#10;            {&#10;            b.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QPushButton&gt;()-&gt;setDisabled(blocked);&#10;            } );&#10;    }&#10;&#10;int&#10;main( int argc, char const * argv[ ] )&#10;    {&#10;    QApplication app(argc,(char * *)argv);&#10;&#10;    //Create a QDialog with a QPushButton and a check QCheckBox.&#10;    boost::shared_ptr&lt;QDialog&gt; qd(new QDialog);&#10;    qd-&gt;setGeometry(QRect(QPoint(200,200),QSize(300,100)));&#10;    QVBoxLayout * layout = new QVBoxLayout;&#10;    QPushButton * pb=new QPushButton(&quot;OK&quot;); layout-&gt;addWidget(pb);&#10;    QCheckBox * cb1=new QCheckBox(&quot;Disabler 1&quot;); layout-&gt;addWidget(cb1);&#10;    QCheckBox * cb2=new QCheckBox(&quot;Disabler 2&quot;); layout-&gt;addWidget(cb2);&#10;    qd-&gt;setLayout(layout);&#10;    pb-&gt;setMaximumWidth(100);&#10;&#10;    //Make a weak_ptr to the QPushButton using shared_ptr aliasing constructor.&#10;    boost::weak_ptr&lt;QPushButton&gt; pbw=boost::shared_ptr&lt;QPushButton&gt;(qd,pb);&#10;&#10;    //accept() the QDialog when pb is clicked.&#10;    boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; c=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt;(pbw,[qd]() { qd-&gt;accept(); } );&#10;&#10;    //Block/unblock the button_clicked Boost Synapse signal when either checkbox is toggled.&#10;    //This simulates two conditions which independently block the button_clicked signal.&#10;    //The lambda function connected to synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt; (see above)&#10;    //is called when transitioning from zero checkboxes being checked to a checkbox being&#10;    //checked, and when transitioning from at least one checkbox being checked to zero&#10;    //checkboxes being checked.&#10;    boost::shared_ptr&lt;synapse::blocker&gt; blk1;&#10;    boost::shared_ptr&lt;synapse::blocker&gt; blk2;&#10;    (void) QObject::connect(cb1,&amp;QCheckBox::stateChanged,&#10;        [&amp;blk1,pbw]( bool block )&#10;            {&#10;            if( block )&#10;                blk1=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt;(pbw);&#10;            else&#10;                blk1.reset();&#10;            } );&#10;    (void) QObject::connect(cb2,&amp;QCheckBox::stateChanged,&#10;        [&amp;blk2,pbw]( bool block )&#10;            {&#10;            if( block )&#10;                blk2=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt;(pbw);&#10;            else&#10;                blk2.reset();&#10;            } );&#10;&#10;    qd-&gt;exec();&#10;    return 0;&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;hpp&quot; except_tags=&quot;noindex&quot; fmt=&quot;index&quot; sort_prefix=&quot;14&quot;:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>23</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;The &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; and &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; functions return &apos;&apos;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos; that is used to control the lifetime of the connection. As well, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; objects are passed to handlers of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; signal, which can use the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&apos;&apos; member function template to access the emitter object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;/&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, and the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;/&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; member function templates to store auxiliary information in the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>9</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;If &apos;&apos;this&apos;&apos; contains object of type &apos;&apos;T&apos;&apos; previously copied by a call to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;, returns a pointer to the copy.&#10;&#10;If &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; has not been called for &apos;&apos;this&apos;&apos;, or if the type used to instantiate the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; function template doesn&apos;t match the type used with &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;, returns 0.</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>35</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;This example program demonstrates how to use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to bind a C-style callback API that uses function pointers. By using meta signals, such C-style callbacks can be connected directly through the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function. The program consists of several source files (also available for download on the main page):&#10;&#10;* &apos;&apos;callback_api.h/.c&apos;&apos; define an example 3rd-party API that uses C-style callbacks. It lets users set a single function pointer callback on objects of type &apos;&apos;api_handle&apos;&apos;. The callback is invoked with different values for the &apos;&apos;event&apos;&apos; argument to report on different events. In this case calling &apos;&apos;api_do_this&apos;&apos; generates &apos;&apos;API_EVENT_THIS&apos;&apos;, and calling &apos;&apos;api_do_that&apos;&apos; generates &apos;&apos;API_EVENT_THAT&apos;&apos;.&#10;* &apos;&apos;synapsify.hpp/.cpp&apos;&apos; contain the machinery needed to handle &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; meta signals. Once initialized, user calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;synapse_callback&gt;&apos;&apos; are forwarded automatically to &apos;&apos;api_set_callback&apos;&apos;/&apos;&apos;api_clear_callback&apos;&apos; (from &apos;&apos;callback_api.h&apos;&apos;) if needed.&#10;* Finally, &apos;&apos;main.cpp&apos;&apos; creates an &apos;&apos;api_handle&apos;&apos; object and then &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;s two different handlers that get called when the &apos;&apos;api_do_this&apos;&apos;/&apos;&apos;api_do_that&apos;&apos; is called.&#10;&#10;&apos;&apos;&apos;Program output:&apos;&apos;&apos;&#10;&#10;[@Detected synapse_callback connection on api_handle at 0x00000000004EE980 (first connection, calling api_set_callback)&#10;Detected synapse_callback connection on api_handle at 0x00000000004EE980&#10;handler1 called on api_handle object at 0x00000000004EE980, event=1&#10;handler2 called on api_handle object at 0x00000000004EE980, event=1&#10;handler1 called on api_handle object at 0x00000000004EE980, event=2&#10;handler2 called on api_handle object at 0x00000000004EE980, event=2&#10;Detected expiring synapse_callback connection on api_handle at 0x00000000004EE980&#10;Detected expiring synapse_callback connection on api_handle at 0x00000000004EE980 (last connection, calling api_clear_callback)@]&#10;&#10;&apos;&apos;&apos;callback_api.h:&apos;&apos;&apos;&#10;&#10;[@typedef struct api_handle api_handle;&#10;api_handle * api_create_object();&#10;void api_destroy_object( api_handle * );&#10;&#10;//The user_data pointer is typical in C-style callbacks APIs, so it&apos;s included&#10;//here even though this example has no use for it.&#10;typedef void (*api_callback_type)( api_handle *, void * user_data, int event );&#10;&#10;void api_set_callback( api_handle *, api_callback_type, void * user_data );&#10;void api_clear_callback( api_handle * );&#10;&#10;//When api_do_this is called, it calls the callback passing API_EVENT_THIS as&#10;//the event argument; api_do_that calls the callback with API_EVENT_THAT.&#10;#define API_EVENT_THIS 1&#10;#define API_EVENT_THAT 2&#10;void api_do_this( api_handle * );&#10;void api_do_that( api_handle * );@]&#10;&#10;&apos;&apos;&apos;callback_api.c:&apos;&apos;&apos;&#10;&#10;[@#include &quot;callback_api.h&quot;&#10;#include &lt;malloc.h&gt;&#10;&#10;struct&#10;api_handle&#10;    {&#10;    api_callback_type callback;&#10;    void * user_data;&#10;    };&#10;&#10;api_handle *&#10;api_create_object()&#10;    {&#10;    api_handle * p=(api_handle *)malloc(sizeof(api_handle));&#10;    p-&gt;callback=0;&#10;    return p;&#10;    }&#10;&#10;void&#10;api_destroy_object( api_handle * p )&#10;    {&#10;    free(p);&#10;    }&#10;&#10;void&#10;api_set_callback( api_handle * p, api_callback_type c, void * user_data )&#10;    {&#10;    p-&gt;callback=c;&#10;    p-&gt;user_data=user_data;&#10;    }&#10;&#10;void&#10;api_clear_callback( api_handle * p )&#10;    {&#10;    p-&gt;callback=0;&#10;    }&#10;&#10;void&#10;api_do_this( api_handle * p )&#10;    {&#10;    if( p-&gt;callback )&#10;        p-&gt;callback(p,p-&gt;user_data,API_EVENT_THIS);&#10;    }&#10;&#10;void&#10;api_do_that( api_handle * p )&#10;    {&#10;    if( p-&gt;callback )&#10;        p-&gt;callback(p,p-&gt;user_data,API_EVENT_THAT);&#10;    }&#10;@]&#10;&#10;&apos;&apos;&apos;synapsify.hpp:&apos;&apos;&apos;&#10;&#10;[@extern &quot;C&quot;&#10;    {&#10;    #include &quot;callback_api.h&quot;&#10;    }&#10;&#10;//This is the Synapse (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) that corresponds to the callbacks received from the C-style callback API.&#10;typedef struct synapse_callback_(*synapse_callback)( api_handle *, int event );&#10;&#10;//Connect synapse::meta::connected&lt;synapse_callback&gt; and synapse::meta::disconnected&lt;synapse_callback&gt;&#10;//to set/clear the api_handle callbacks when synapse_callback signals are connected or disconnected.&#10;void synapsify();@]&#10;&#10;&apos;&apos;&apos;synapsify.cpp&apos;&apos;&apos;&#10;&#10;[@#include &quot;synapsify.hpp&quot;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;iostream&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;    {&#10;    void&#10;    emit_fwd( api_handle * h, void *, int v )&#10;        {&#10;        (void) synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse_callback&gt;(h,h,v);&#10;        }&#10;    }&#10;&#10;void&#10;synapsify()&#10;    {&#10;    static boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; c=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse::meta::connected&lt;synapse_callback&gt; &gt;(synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>(),&#10;        [ ]( synapse::connection &amp; c, unsigned flags )&#10;            {&#10;            boost::shared_ptr&lt;api_handle&gt; h=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;api_handle&gt;();&#10;            std::cout &lt;&lt; &quot;Detected synapse_callback &quot; &lt;&lt; ((flags&amp;synapse::meta::connect_flags::connecting)?&quot;&quot;:&quot;dis&quot;) &lt;&lt; &quot;connection on api_handle at 0x&quot; &lt;&lt; h.get();&#10;            if( flags&amp;synapse::meta::connect_flags::first_for_this_emitter )&#10;                {&#10;                assert(flags&amp;synapse::meta::connect_flags::connecting);&#10;                std::cout &lt;&lt; &quot; (first connection, calling api_set_callback)&quot;;&#10;                api_set_callback(h.get(),&amp;emit_fwd,0);&#10;                }&#10;            else if( flags&amp;synapse::meta::connect_flags::last_for_this_emitter )&#10;                {&#10;                assert(!(flags&amp;synapse::meta::connect_flags::connecting));&#10;                std::cout &lt;&lt; &quot; (last connection, calling api_clear_callback)&quot;;&#10;                api_clear_callback(h.get());&#10;                }&#10;            std::cout &lt;&lt; std::endl;&#10;            } );&#10;    }@]&#10;&#10;&apos;&apos;&apos;main.cpp&apos;&apos;&apos;&#10;&#10;[@#include &quot;synapsify.hpp&quot;&#10;#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;#include &lt;iostream&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;    {&#10;    void&#10;    handler1( api_handle * h, int event )&#10;        {&#10;        std::cout &lt;&lt; &quot;handler1 called on api_handle object at 0x&quot; &lt;&lt; h &lt;&lt; &quot;, event=&quot; &lt;&lt; event &lt;&lt; std::endl;&#10;        }&#10;    void&#10;    handler2( api_handle * h, int event )&#10;        {&#10;        std::cout &lt;&lt; &quot;handler2 called on api_handle object at 0x&quot; &lt;&lt; h &lt;&lt; &quot;, event=&quot; &lt;&lt; event &lt;&lt; std::endl;&#10;        }&#10;    }&#10;&#10;int&#10;main()&#10;    {&#10;    //Connect the meta signal handlers to deal with  api_set_callback and api_clear_callback&#10;    //automatically -- see callback_api.h and synapsify.cpp.&#10;    synapsify();&#10;&#10;    //Use shared_ptr with a custom deleter to hold an api_handle object.&#10;    boost::shared_ptr&lt;api_handle&gt; h(api_create_object(),&amp;api_destroy_object);&#10;&#10;        {&#10;        //The meta signal handlers deal with api_set_callback and api_clear_callback as needed,&#10;        //so now we can use Synapse to connect to the C-style API callbacks. Note that we can&#10;        //create many connections even though the C-style API supports only a single callback&#10;        //per api_handle object.&#10;        auto c1=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;synapse_callback&gt;(h,&amp;handler1);&#10;        auto c2=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;synapse_callback&gt;(h,&amp;handler2);&#10;&#10;        //This invokes handler1 and handler2, in that order, passing API_EVENT_THIS.&#10;        api_do_this(h.get());&#10;&#10;        //This invokes handler1 and handler2, in that order, passing API_EVENT_THAT.&#10;        api_do_that(h.get());&#10;        }&#10;&#10;    //At this point all synapse_callback connections have expired and the meta handlers have&#10;    //cleared the callback on the api_handle object, so the calls below do not invoke any handlers.&#10;    api_do_this(h.get());&#10;    api_do_that(h.get());&#10;&#10;    return 0;&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;A thread-local object that can be used to queue signals emitted asynchronously from other threads. Use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to emit the queued signals sinchronously into the calling thread. See (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:).&#10;&#10;!!!!Note:&#10;&#10;While any number of threads can use this function to create their own &apos;&apos;thread_local_queue&apos;&apos;, it is invalid to create more than one &apos;&apos;thread_local_queue&apos;&apos; object per thread.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>21</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;This program demonstrates how to use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to build a simple logging system. Logging is done by emitting &apos;&apos;log_message&apos;&apos; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|signals:) from different emitters based on the log message&apos;s severity.&#10;&#10;It consists of the following source files:&#10;&#10;* &apos;&apos;logger.h/logger.cpp&apos;&apos;: these files implement the logging interface;&#10;* &apos;&apos;main.cpp&apos;&apos;: a simple program using the interface defined in &apos;&apos;logger.h&apos;&apos;.&#10;&#10;&apos;&apos;&apos;Program output:&apos;&apos;&apos;&#10;&#10;[@Message 1, Severity 0&#10;Message 2, Severity 100&#10;Message 2, Severity 100&#10;Message 3, Severity 2&#10;Message 3, Severity 2@]&#10;&#10;&apos;&apos;&apos;logger.h:&apos;&apos;&apos;&#10;&#10;[@namespace boost { template &lt;class&gt; class shared_ptr; }&#10;&#10;#include &lt;stdio.h&gt;&#10;&#10;struct logger;&#10;&#10;//Create a logger object that can discriminate between messages based on severity up to the&#10;//specified maximum. Messages with higher max_severity are assumed to be of max_severity.&#10;boost::shared_ptr&lt;logger&gt; init_logger( int max_severity );&#10;&#10;//Add a target for logging messages with at least the specified severity.&#10;void add_log_target( logger &amp;, boost::shared_ptr&lt;FILE&gt; const &amp;, int min_severity );&#10;&#10;//Get a Boost Synapse emitter based on the message&apos;s severity.&#10;void const * severity( int severity );&#10;&#10;//Emit this Boost Synapse signal to log a message.&#10;typedef struct log_message_(*log_message)( char const * );@]&#10;&#10;&apos;&apos;&apos;logger.cpp:&apos;&apos;&apos;&#10;&#10;[@#include &quot;logger.h&quot;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;vector&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;    {&#10;    //Emitters, indexed by severity.&#10;    std::vector&lt;boost::weak_ptr&lt;void const&gt; &gt; emitters_;&#10;&#10;    void&#10;    log_string( boost::shared_ptr&lt;FILE&gt; const &amp; f, char const * str )&#10;        {&#10;        assert(f);&#10;        assert(str!=0);&#10;        (void) fprintf(f.get(),&quot;%s&quot;,str);&#10;        }&#10;&#10;    boost::weak_ptr&lt;void const&gt; const &amp;&#10;    severity_( int s )&#10;        {&#10;        assert(s&gt;=0);&#10;        assert(!emitters_.empty());&#10;        return s&gt;=emitters_.size()? emitters_.back() : emitters_[s];&#10;        }&#10;    }&#10;&#10;struct&#10;logger&#10;    {&#10;    private:&#10;    logger( logger const &amp; );&#10;    logger &amp; operator=( logger const &amp; );&#10;    public:&#10;    explicit&#10;    logger( int max_severity )&#10;        {&#10;        std::vector&lt;boost::weak_ptr&lt;void const&gt; &gt;(max_severity).swap(emitters_);&#10;        }&#10;    std::vector&lt;boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; &gt; connections_;&#10;    };&#10;&#10;boost::shared_ptr&lt;logger&gt;&#10;init_logger( int max_severity )&#10;    {&#10;    assert(max_severity&gt;0);&#10;    boost::shared_ptr&lt;logger&gt; l(new logger(max_severity));&#10;&#10;    //Populate the static emitters vector: each emitter is a weak_ptr initialized from a shared_ptr alias&#10;    //of the logger object, but with a unique address.&#10;    for( int i=0; i!=max_severity; ++i )&#10;        emitters_[i]=boost::shared_ptr&lt;void const&gt;(l,&amp;emitters_[i]);&#10;&#10;    //Translate signals from higher severity emitters to lower severity emitters. This way a high severity&#10;    //message will automatically trickle down to lower severity emitters. With this approach it is possible&#10;    //to build a more complex translation DAG if needed.&#10;    for( int i=0; i!=max_severity-1; ++i )&#10;        l-&gt;connections_.push_back(synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;log_message,log_message&gt;(emitters_[i+1],emitters_[i].lock().get()));&#10;&#10;    return l;&#10;    }&#10;&#10;void&#10;add_log_target( logger &amp; l, boost::shared_ptr&lt;FILE&gt; const &amp; target, int min_severity )&#10;    {&#10;    assert(target);&#10;    assert(min_severity&gt;=0);&#10;    assert(min_severity&lt;emitters_.size());&#10;&#10;    //Connect the appropriate emitter based on severity. Since signals from higher severity emitters are&#10;    //translated to lower severities, the target will only get the messages with severity &gt;= min_severity.&#10;    l.connections_.push_back(synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;log_message&gt;(severity_(min_severity),&#10;        [target]( char const * str )&#10;            {&#10;            log_string(target,str);&#10;            } ) );&#10;    }&#10;&#10;void const *&#10;severity( int s )&#10;    {&#10;    assert(s&gt;=0);&#10;    assert(!emitters_.empty());&#10;    return (s&gt;=emitters_.size()? emitters_.back() : emitters_[s]).lock().get();&#10;    }@]&#10;&#10;&apos;&apos;&apos;main.cpp:&apos;&apos;&apos;&#10;&#10;[@#include &quot;logger.h&quot;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace { struct null_deleter { void operator()( void const * ) { } }; }&#10;&#10;void&#10;do_some_logging()&#10;    {&#10;    synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;log_message&gt;(severity(0),&quot;Message 1, Severity 0\n&quot;);&#10;    synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;log_message&gt;(severity(100),&quot;Message 2, Severity 100\n&quot;);&#10;    synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;log_message&gt;(severity(2),&quot;Message 3, Severity 2\n&quot;);&#10;    }&#10;&#10;int&#10;main()&#10;    {&#10;    //Create a logger that can distinguish between up to 3 severity levels: 0, 1 and 2.&#10;    boost::shared_ptr&lt;logger&gt; const l=init_logger(3);&#10;&#10;    //Severity 0 and 1 go to stdout, severity 2 and above go to stdout and stderr.&#10;    add_log_target(*l,boost::shared_ptr&lt;FILE&gt;(stdout,null_deleter()),0);&#10;    add_log_target(*l,boost::shared_ptr&lt;FILE&gt;(stderr,null_deleter()),2);&#10;&#10;    do_some_logging();&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Description:&#10;&#10;Stores a copy of &apos;&apos;data&apos;&apos; into &apos;&apos;this&apos;&apos;. Use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to access it. &#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>15</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;This template defines a signal that is emitted by the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; when the specified &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is blocked by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. The emitter object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; can be accessed by handlers of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; through &apos;&apos;eb&apos;&apos;. Users can connect this meta signal to reflect the blocking of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; in other systems. For example &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot; automatically disables or enables a button whenever its signal is blocked or unblocked.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;Synchronously emits all signals queued asynchronously into &apos;&apos;q&apos;&apos; by calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from other threads. See (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:).&#10;&#10;!!!!Returns:&#10;&#10;The total number of signals emitted.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>47</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;Calls all function objects that are connected to the specified &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from the emitter &apos;&apos;e&apos;&apos;, in the order in which they were connected by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, passing the specified arguments depending on &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;::arity&apos;&apos;, subject to the connection lifetime/(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)ing restrictions.&#10;&#10;!!!!Returns:&#10;&#10;The count of the connected function objects that were called. (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;p&quot;:) that are currently (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|blocked:) are not included in the count returned by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;&#10;!!!!Warning:&#10;&#10;It is the responsibility of the caller to ensure that the emitter object &apos;&apos;e&apos;&apos; does not expire before &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; returns, otherwise the behavior is undefined.&#10;&#10;(:include throws:)&#10;&#10;!!!!Notes:&#10;&#10; *Values returned by the (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|connected:) function objects are ignored.&#10;&#10;*If before &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; returns &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is called on the same signal and the same emitter, any newly connected functions are not called during the same &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;*If before &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; returns a connection object expires, it may or may not get called during the same &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;*If &apos;&apos;e&apos;&apos; is 0 &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; simply returns 0 without calling any functions. Because of this feature, if the emitter is held by a &apos;&apos;shared_ptr&apos;&apos; object &apos;&apos;sp&apos;&apos;, there is no harm in calling &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;Signal&gt;(sp.get(),....)&apos;&apos; even if &apos;&apos;sp&apos;&apos; is empty. Similarly, if the caller has a &apos;&apos;weak_ptr&apos;&apos; to the emitter object which has expired, calling &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;Signal&gt;(wp.lock().get(),....) will simply return 0.&#10;* &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; takes its arguments by value. Use &apos;&apos;boost::ref&apos;&apos; to pass by reference.&#10;&#10;!!!!Header-only emit:&#10;&#10;If no signals are ever connected, &apos;&apos;emit&apos;&apos; is a no-op. For this reason, if a user library calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; but does not call &apos;&apos;connect&apos;&apos;, there is no need to link the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; library. As an example, a low level library that emits signals similar to &apos;&apos;report_progress&apos;&apos; (see the &apos;&apos;FILE&apos;&apos; example earlier on this page) can do so without requiring a client program that doesn&apos;t care about them to link &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;example&quot; except_tags=&quot;noindex&quot;:)</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>11</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;This program demonstrates how Boost Synapse can be used to dispatch &apos;&apos;WindowProc&apos;&apos; messages using the &apos;&apos;HWND&apos;&apos; object as the emitter argument to &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. It also shows how &apos;&apos;boost::shared_ptr&apos;&apos; can be used to control the lifetime of Windows objects.&#10;&#10;[@#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#define NOMINMAX&#10;#include &lt;windows.h&gt;&#10;#include &lt;sstream&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;    {&#10;    //Define a mouse_move signal that takes the mouse cursor coordinates.&#10;    typedef struct mouse_move_(*mouse_move)( int x, int y );&#10;&#10;    //Windows handles are pointer typedefs. The code below extracts the pointer type&#10;    //from the typedef so that it can be used with shared_ptr. This technique works for&#10;    //all Windows handle types.&#10;    template &lt;class T&gt; struct h_type;&#10;    template &lt;class T&gt; struct h_type&lt;T *&gt; { typedef T type; };&#10;    typedef h_type&lt;HWND&gt;::type hwnd_t;&#10;&#10;    //This is our WindowProc registered with Windows. Its translates Windows messages&#10;    //into calls to synapse::emit&lt;&gt;, passing the hWnd as the emitter object.&#10;    LRESULT CALLBACK&#10;    WindowProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )&#10;        {&#10;        switch( uMsg )&#10;            {&#10;            default:&#10;                return DefWindowProc(hWnd,uMsg,wParam,lParam);&#10;            case WM_MOUSEMOVE:&#10;                synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;mouse_move&gt;(hWnd,lParam&amp;0xFFFF,(lParam&gt;&gt;16)&amp;0xFFFF);&#10;                break;&#10;            case WM_CLOSE:&#10;                PostQuitMessage(0);&#10;                break;&#10;            }&#10;        return 0;&#10;        }&#10;&#10;    //This function is connected to the mouse_move signal emitted by WindowProc.&#10;    void&#10;    print_mouse_position( HWND hWnd, int x, int y )&#10;        {&#10;        if( HDC dc=GetDC(hWnd) )&#10;            {&#10;            std::ostringstream str; str &lt;&lt; &quot;Mouse position: &quot; &lt;&lt; x &lt;&lt; &quot;, &quot; &lt;&lt; y;&#10;            std::string s=str.str();&#10;            RECT rect; GetClientRect(hWnd,&amp;rect);&#10;            FillRect(dc,&amp;rect,(HBRUSH) GetStockObject(WHITE_BRUSH));&#10;            TextOutA(dc,10,10,s.c_str(),s.size());&#10;            ReleaseDC(hWnd,dc);&#10;            }&#10;        }&#10;    }&#10;&#10;int CALLBACK&#10;WinMain( HINSTANCE hInstance, HINSTANCE, LPSTR, int )&#10;    {&#10;    //Register the Windows class.&#10;    char const name[ ]=&quot;win_WindowProc&quot;;&#10;    WNDCLASSEXA wcx; &#10;    wcx.cbSize = sizeof(wcx);&#10;    wcx.style = CS_HREDRAW|CS_VREDRAW|CS_DBLCLKS;&#10;    wcx.lpfnWndProc = &amp;WindowProc;&#10;    wcx.cbClsExtra = 0;&#10;    wcx.cbWndExtra = 0;&#10;    wcx.hInstance = hInstance;&#10;    wcx.hIcon = 0;&#10;    wcx.hCursor=LoadCursor(NULL,IDC_ARROW);&#10;    wcx.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH);&#10;    wcx.lpszMenuName =  0; &#10;    wcx.lpszClassName = name;&#10;    wcx.hIconSm = 0;&#10;    (void) RegisterClassExA(&amp;wcx);&#10;&#10;    //Create a window and hold on to it by shared_ptr.&#10;    boost::shared_ptr&lt;hwnd_t&gt; hWnd;&#10;    if( HWND w=CreateWindowA(name,name,WS_OVERLAPPED|WS_CAPTION|WS_SYSMENU|WS_SIZEBOX,200,200,400,200,0,0,hInstance,0) )&#10;        boost::shared_ptr&lt;hwnd_t&gt;(w,&amp;DestroyWindow).swap(hWnd);&#10;    else&#10;        return 1; //Error&#10;&#10;    //Connect the mouse_move signal from the hWnd emitter to the print_mouse_position function.&#10;    boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; conn=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;mouse_move&gt;(hWnd,&#10;        [&amp;hWnd]( int x, int y )&#10;            {&#10;            print_mouse_position(hWnd.get(),x,y);&#10;            } );&#10;&#10;    //Show the window and call print_mouse_position once so it&apos;s not empty to begin with.&#10;    ShowWindow(hWnd.get(),SW_SHOW);&#10;    print_mouse_position(hWnd.get(),0,0);&#10;&#10;    //Process messages -- this continues until the user closes the window.&#10;    for( MSG msg; GetMessageA(&amp;msg,0,0,0); )&#10;        {&#10;        TranslateMessage(&amp;msg);&#10;        DispatchMessage(&amp;msg);&#10;        }&#10;    return 0;&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>17</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;As if:&#10;&#10;[@return (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:)&gt;(original_emitter,boost::bind(&amp;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:)&gt;,translated_emitter,_1,_2,...),connection_lifetime)@]&#10;&#10;This function can be used to translate one signal into another signal, as long as their arguments are compatible. For example, if we have a button &apos;&apos;btn&apos;&apos; and a dialog &apos;&apos;dlg&apos;&apos;, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_on_click,dialog_confirmed&gt;(btn,dlg)&apos;&apos; can be used to confirm the dialog when the button is clicked.&#10;&#10;!!!!Note:&#10;&#10;The returned connection itself does not count towards the return value of &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;OriginalSignal&gt;&apos;&apos;; that is, the return value of &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;OriginalSignal&gt;&apos;&apos; is as if &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;TranslatedSignal&gt;&apos;&apos; was called instead.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>31</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; can be used to implement interthread communication using (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;p&quot;:). The data structures created by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) use thread-local storage, so by default calling &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; will call only the functions connected by the calling thread (and will not return until all such functions have been called in order, or one of them throws.)&#10;&#10;The following diagram illustrates this use case: the user has connected functions &apos;&apos;F1&apos;&apos;, &apos;&apos;F2&apos;&apos;, ..., &apos;&apos;Fn&apos;&apos; to the corresponding emitter objects &apos;&apos;E1&apos;&apos;, &apos;&apos;E2&apos;&apos;, ..., &apos;&apos;En&apos;&apos;, by calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, creating &apos;&apos;n&apos;&apos; thread-local connections. Then, the call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; iterates the thread-local connection objects, and for each emitter calls the connected function:&#10;&#10;[@replace replace@]&#10;&#10;However, it is also possible for any thread to request to receive signals emitted by other threads, by creating its own &apos;&apos;thread_local_queue&apos;&apos; object using &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;&#10;In this case, &apos;&apos;&apos;in addition&apos;&apos;&apos; to the behavior described above, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; will capture its arguments and queue them into the &apos;&apos;thread_local_queue&apos;&apos; object created by any thread &apos;&apos;&apos;other&apos;&apos;&apos; than the calling thread. Each such thread must &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; its own &apos;&apos;thread_local_queue&apos;&apos; regularly, which &quot;emits&quot; the queued objects locally and removes them from the queue.&#10;&#10;This is illustrated by the following diagram:&#10;&#10;[@replace replace@]&#10;&#10;A typical use case for this system is to update user interface objects with data generated by one or multiple worker threads. This way, the user interface objects themselves need not be thread-safe, because they will be updated only synchronously, at the time &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is called.&#10;&#10;!!!!Warning:&#10;&#10;Special care must be taken to ensure that any objects referred to by arguments passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; will remain valid until the time any other threads &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; their &apos;&apos;thread_local_queues&apos;&apos;. For example, the following code is incorrect in the presence of &apos;&apos;thread_local_queues&apos;&apos;:&#10;&#10;[@typedef struct my_signal_(*my_signal)( int * );&#10;&#10;void&#10;emit_my_signal( int x )&#10;    {&#10;    (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;my_signal&gt;(&amp;x); //Undefined behavior in the presence of thread_local_queues!&#10;    }@]&#10;&#10;The problem is that the address of &apos;&apos;x&apos;&apos; may be queued into other threads&apos; queues, and since &apos;&apos;x&apos;&apos; is local to &apos;&apos;emit_my_signal&apos;&apos;, it may be destroyed by the time these threads call &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;function&quot; except_tags=&quot;noindex&quot; fmt=&quot;index&quot;:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>25</size>
												<variant>2</variant>
												<string>!!!Introduction&#10;&#10;(Note: Boost Synapse is not part of (:link http://www.boost.org|Boost:). Please post questions and suggestions on the (:link http://www.boost.org/community/groups.html#main|Boost Developers Mailing List:)).&#10;&#10;&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is a C++ (:link http://en.wikipedia.org/wiki/Signal_programming|signal programming:) library. It can be used to define communication channels between many different entities in a dynamic object environment. Sometimes such libraries are part of a larger API, but independent alternatives like (:link http://www.boost.org/doc/libs/release/doc/html/signals2.html|Boost Signals 2:) or (:link http://libsigc.sourceforge.net|libsigc++:) are available as well.&#10;&#10;The advantage of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; over other similar libraries is that it is non-intrusive: it allows any object of any type whatsoever to be used as a signal emitter.&#10;&#10;!!!Contents&#10;&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;&#10;!!!Examples&#10;&#10;(:pagelist tags=&quot;example&quot; except_tags=&quot;noindex&quot;:)&#10;!!!Multi-threading support&#10;&#10;Most of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; functionality is implemented using thread-local data structures, so by default signals are propagated independently within each user thread. In addition, thread-local queues can be created in any thread, to synchronously receive queued signals emitted asynchronously by other threads; see (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:).&#10;&#10;!!!Download&#10;&#10;See (:link https://github.com/zajo/boost-synapse|this:) github repo.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>17</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; has been formatted to be submitted for a Boost review, so its directory structure follows the common directory structure for Boost libraries—and it&apos;s built with Boost Build.&#10;&#10;Alternatively, just put &apos;&apos;connect.cpp&apos;&apos; and either &apos;&apos;thread_local_queue.cpp&apos;&apos; or &apos;&apos;interthread_stub.cpp&apos;&apos; into your favorite build system, depending on whether or not your program calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. In addition if your program calls the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function, you also need to compile and link &apos;&apos;block.cpp&apos;&apos;.&#10;&#10;However, note that if your program only emits signals (that is, it calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; but it never creates any &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;p&quot;:)&apos;&apos;), there is no need to link any &apos;&apos;.cpp&apos;&apos; files; that is, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; by itself is an independent header-only library. This way libraries that emit signals do not require the user to link &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, unless he cares to connect them.&#10;&#10;!!!Portability&#10;&#10;Currently &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; requires compiler support for the following C++11 features:&#10;&#10;* Thread-safe dynamic initialization of local static objects;&#10;* thread_local objects;&#10;* lambda functions&#10;* &lt;thread&gt;&#10;* &lt;atomic&gt;&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>19</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;A &apos;&apos;shared_ptr&apos;&apos; that points the emitter that was passed to an overload of the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; (or &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;) function template to get the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object.&#10;&#10;!!!!Notes:&#10;&#10;* An empty &apos;&apos;shared_ptr&apos;&apos; is returned if:&#10;** &apos;&apos;T&apos;&apos; does not match the static type of the emitter passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; (or &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;), or&#10;** the emitter was passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; (or &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;) as a &apos;&apos;shared/weak_ptr&apos;&apos; and it has expired.&#10;* If the emitter was passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; (or &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;) as a raw pointer, the returned &apos;&apos;shared_ptr&apos;&apos; points that emitter but does not (can not) keep it afloat.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>29</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;This template defines a signal that is emitted by the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; every time a &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object is created (or destroyed) connecting (or disconnecting) the specified &apos;&apos;Signal&apos;&apos;. This meta signal can be used to integrate &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; with a 3rd-party callback/signal API. For an example see &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;&#10;Connected handlers must take two arguments: &apos;&apos;c&apos;&apos; is the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; being created or destroyed, and &apos;&apos;flags&apos;&apos; is a combination of the bits defined in the &apos;&apos;connect_flags&apos;&apos; namespace:&#10;&#10;* the &apos;&apos;connecting&apos;&apos; bit is set if the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object is being created, and cleared if it&apos;s being destroyed;&#10;* the &apos;&apos;first_for_this_emitter&apos;&apos; bit is set if the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object is being created and it is the first &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; for the emitter passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;/&apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;;&#10;* the &apos;&apos;last_for_this_emitter&apos;&apos; bit is set if the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object is being destroyed and it is the last &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; for the emitter passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;/&apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>49</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;Blocks the specified &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from the emitter &apos;&apos;e&apos;&apos; until the returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object expires. While the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is blocked, calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;Signal&gt;&apos;&apos; for &apos;&apos;e&apos;&apos; are ignored and return 0.&#10;&#10;!!!!Warning:&#10;&#10;If &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; is passed a raw pointer, deleting the emitter before the returned &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object has expired results in undefined behavior.&#10;&#10;!!!!Notes:&#10;&#10;* Blocking affects existing as well as future connections.&#10;* If the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; was &apos;&apos;&apos;not&apos;&apos;&apos; blocked for &apos;&apos;e&apos;&apos; at the time &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is called, it emits &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos; from the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, passing &apos;&apos;true&apos;&apos; for the &apos;&apos;is_blocked&apos;&apos; argument;&#10;* When the returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object expires, if there are no other &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; objects blocking the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from the same emitter &apos;&apos;e&apos;&apos;, the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos; is again emitted from the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; with &apos;&apos;false&apos;&apos; passed for the &apos;&apos;is_blocked&apos;&apos; argument;&#10;* The &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object is passed to handlers of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos;. They can use it to access the emitter &apos;&apos;e&apos;&apos; passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;;&#10;* The returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object does not own &apos;&apos;e&apos;&apos; even if the &apos;&apos;shared_ptr&apos;&apos; &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; overload is used.&#10;&#10;!!!!Example:&#10;&#10;See &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>265</size>
												<variant>2</variant>
												<string>This is a short introduction to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. There are also several complete (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|example programs:) that may be of interest to the beginner.&#10;&#10;!!!Defining signals&#10;&#10;Defining signals is very simple. For example, to define a &apos;&apos;mouse_move&apos;&apos; signal that takes two ints we could use:&#10;&#10;[@typedef struct mouse_move_(*mouse_move)( int x, int y );@]&#10;&#10;The return type (in this case &apos;&apos;mouse_move_&apos;&apos;) is ignored when the signal is emitted. Instead, it is used to tell apart different signals that take the same arguments. For example, the &apos;&apos;button_down&apos;&apos; signal defined below is different from &apos;&apos;mouse_move&apos;&apos; even though they both take two ints:&#10;&#10;[@typedef struct button_down_(*button_down)( int x, int y );@]&#10;&#10;That&apos;s it! Now we&apos;re ready to emit signals!&#10;&#10;!!!Emitting signals&#10;&#10;To emit a signal simply call &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; passing an emitter object. Any object of any type whatsoever can be used as an emitter. For example, from a member function we could pass &apos;&apos;this&apos;&apos; as the emitter:&#10;&#10;[@//Define a button_clicked signal that takes no arguments.&#10;typedef struct button_clicked_(*button_clicked)();&#10;&#10;class&#10;my_button&#10;    {&#10;    ....&#10;    void&#10;    emit_button_clicked()&#10;        {&#10;        synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(this);&#10;        }&#10;    };@]&#10;&#10;Of course, while the above call is well defined, it will not invoke any functions because we haven&apos;t connected anything to the signal yet.&#10;&#10;!!!Connecting signals&#10;&#10;We have defined and emitted a signal, but to respond to it we need to connect it to a function. This is done using &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, which returns a &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object. For example:&#10;&#10;[@my_button b;&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b,f);@]&#10;&#10;This connects the &apos;&apos;button_clicked&apos;&apos; signal from the &apos;&apos;my_button&apos;&apos; object &apos;&apos;b&apos;&apos; to the function object &apos;&apos;f&apos;&apos;, which of course must match the signature of the signal being connected—in this case &apos;&apos;f&apos;&apos; must be a function that takes no arguments. Calling &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; invokes all function objects that are connected to the specified emitter, in the order they have been connected.&#10;&#10;To break the &apos;&apos;button_clicked&apos;&apos; connection between &apos;&apos;b&apos;&apos; and &apos;&apos;f&apos;&apos;, simply let the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object expire. Optionally &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; takes a third &apos;&apos;weak_ptr&lt;void const&gt;&apos;&apos; argument. If specified, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; will lock it before invoking the connected function and will not call the function if the &apos;&apos;weak_ptr&apos;&apos; has expired. For example this is useful if &apos;&apos;f&apos;&apos; binds a member function of an object managed by &apos;&apos;shared_ptr&apos;&apos; to ensure that &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; does not invoke it if the object has expired:&#10;&#10;[@class&#10;target&#10;    {&#10;    public:&#10;    target(....);&#10;    void do_something();&#10;    };&#10;&#10;my_button b;&#10;boost::shared_ptr&lt;target&gt; t=boost::make_shared&lt;target&gt;(....);&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b,&#10;    boost::bind(&amp;target::do_something,t.get()),t);&#10;&#10;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(); //invokes t-&gt;do_something().&#10;t.reset();&#10;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(); //does not invoke t-&gt;do_something().@]&#10;&#10;We have passed &apos;&apos;t&apos;&apos; as the third argument to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, and now the connection retains a &apos;&apos;weak_ptr&apos;&apos; to &apos;&apos;t&apos;&apos;. This allows &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to detect that by the time the second call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;()&apos;&apos; occurs the target has expired, and so &apos;&apos;t-&gt;do_something()&apos;&apos; will not be invoked—even though the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object &apos;&apos;c&apos;&apos; is still afloat.&#10;&#10;Notice that in the call to &apos;&apos;boost::bind&apos;&apos; we pass &apos;&apos;t.get()&apos;&apos; rather than &apos;&apos;t&apos;&apos;. Had we passed &apos;&apos;t&apos;&apos;, the function object &apos;&apos;bind&apos;&apos; returns would be keeping the target afloat—which is a valid design choice but not what we wanted in this case. Passing a raw poither is safe because when &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; calls a connected function, it first locks the &apos;&apos;weak_ptr&apos;&apos; passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. &#10;&#10;!!!Emitting signals from objects of 3rd-party types&#10;&#10;Recall that any object whatsoever can be used as an emitter. This makes it possible to emit non-intrusively even if the emitter object is not built to support signals. For example, a function that processes a file can use the standard &apos;&apos;FILE&apos;&apos; pointer as a &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emitter to report on its progress:&#10;&#10;[@typedef struct report_progress_(*report_progress)(int);&#10;&#10;void&#10;process_file( FILE * f )&#10;    {&#10;    for( int progress=0; !feof(f); )&#10;        {&#10;        ....&#10;        progress += fread(buf,1,nread,f);&#10;        synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;report_progress&gt;(f,progress);&#10;        }&#10;    }@]&#10;&#10;Outside of &apos;&apos;process_file&apos;&apos; the &apos;&apos;report_progress&apos;&apos; signal can be connected to some user interface function that updates a progress bar. Using &apos;&apos;(:link www.qt.io|Qt:)&apos;&apos;, this could look like this:&#10;&#10;[@if( FILE * f=fopen(&quot;file.dat&quot;,&quot;rb&quot;) )&#10;    {&#10;    (:link https://www.google.com/search?q=QProgressBar|QProgressBar:) pb(....);&#10;    auto c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;report_progress&gt;(f,boost::bind(&amp;QProgressBar::setValue,&amp;pb,_1));&#10;    process_file(f);&#10;    }@]&#10;&#10;Notice that &apos;&apos;process_file&apos;&apos; is not coupled with &apos;&apos;QProgressBar&apos;&apos;: the &apos;&apos;report_progress&apos;&apos; signal could be connected to a different function or not connected at all, in which case the call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; would be a no-op.&#10;&#10;For another example of calling &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; on an object of a 3rd-party type see &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;&#10;!!!Interoperability with other signal programming APIs&#10;&#10;&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; can be used to extend the functionality of other signal programming APIs. Suppose we call &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; with an object of type &apos;&apos;(:link https://www.google.com/search?q=QPushButton|QPushButton:)&apos;&apos;:&#10;&#10;[@//Define a (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) signal.&#10;typedef void QPushButton_clicked_(*QPushButton_clicked)();&#10;&#10;....&#10;QPushButton b;&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(&amp;b,f);@]&#10;&#10;Now we can call &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; &quot;manually&quot; to make the &apos;&apos;QPushButton&apos;&apos; emit our &apos;&apos;QPushButton_clicked&apos;&apos; signal (which in this case will call &apos;&apos;f&apos;&apos; as long as the connection is alive):&#10;&#10;[@synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(&amp;b);@]&#10;&#10;As is the case with the previous &apos;&apos;FILE&apos;&apos; pointer example, due to the non-intrusive nature of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, emitting the &apos;&apos;QPushButton_clicked&apos;&apos; signal does not require cooperation from the &apos;&apos;QPushButton&apos;&apos; type itself.&#10;&#10;-&gt;&apos;&apos;Note: This technique can be used to define new types of signals for existing &apos;&apos;Qt&apos;&apos; types, which is not supported by the native Qt API (in Qt, to add custom signals to a button we must define a new type that derives from QPushButton, which then must be passed through the proprietary Qt Meta Object Compiler, which is difficult without qmake). For a complete example see &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;&apos;&apos;.&#10;&#10;We can also make the &apos;&apos;QPushButton&apos;&apos; call &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos; automatically when clicked by connecting its native &apos;&apos;QPushButton::clicked&apos;&apos; signal (using the &apos;&apos;Qt&apos;&apos; API) to &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;:&#10;&#10;[@(:link https://www.google.com/search?q=QObject|QObject:)::connect(&amp;b,&#10;    &amp;QPushButton::clicked,boost::bind(&amp;synapse::emit&lt;QPushButton_clicked&gt;,&amp;b);@]&#10;&#10;!!!Meta signals&#10;&#10;In the above example, even though clicking the &apos;&apos;QPushButton&apos;&apos; calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos; automatically, the setup was not automatic. This can be improved by using meta signals.&#10;&#10;Every time &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos; is called, the global &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits the special signal &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos;. A possible handler of this signal may be declared like this:&#10;&#10;[@void handle_QPushButton_clicked_connect( synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; c, unsigned flags );@]&#10;&#10;The first parameter, &apos;&apos;c&apos;&apos;, refers to the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object created by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos;. The second parameter is a combination of bits which depends on the circumstances in which the handler is invoked. In particular, the &apos;&apos;connecting&apos;&apos; bit is set when the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object is being created; the meta signal is also emitted just as the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object is expiring, in which case the &apos;&apos;connecting&apos;&apos; bit is not set.&#10;&#10;Regardless, the handler may use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to access the emitter object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;:&#10;&#10;[@void&#10;handle_QPushButton_clicked_connect( synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; c, unsigned flags )&#10;    {&#10;    if( flags&amp;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|meta::connect_flags::connecting:) )&#10;        {&#10;        boost::shared_ptr&lt;QPushButton&gt; b=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QPushButton&gt;();&#10;        QMetaObject::Connection qc=QObject::connect(b.get(),&amp;QPushButton::clicked,&#10;            boost::bind(&amp;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;,b.get()));&#10;        c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)(qc);&#10;        }&#10;    else&#10;        QObject::disconnect(*c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QMetaObject::Connection&gt;());&#10;    }@]&#10;&#10;Calling &apos;&apos;c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QPushButton&gt;&apos;&apos; returns the &apos;&apos;QPushButton&apos;&apos; object being passed to the call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos; which triggered our handler. Next, we use the &apos;&apos;Qt&apos;&apos; API to connect the &apos;&apos;Qt&apos;&apos;-native &apos;&apos;QPushButton::clicked&apos;&apos; signal to &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, storing the resulting &apos;&apos;Qt&apos;&apos; connection object into &apos;&apos;c&apos;&apos; using &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&apos;&apos; (which can be used to store a value of any type in &apos;&apos;c&apos;&apos;). When the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; expires (the &apos;&apos;else&apos;&apos; branch), we retrieve the &apos;&apos;Qt&apos;&apos; connection from the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; using &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&apos;&apos; and pass it to &apos;&apos;QObject::disconnect&apos;&apos;.&#10;&#10;All that remains is to connect the &apos;&apos;handle_QPushButton_clicked_connect&apos;&apos; function to the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. This can be done by a simple namespace-scope call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; placed in the same compilation unit that defines the handler:&#10;&#10;[@auto meta_QPushButton_clicked=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt; &gt;(&#10;    synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)(),&amp;handle_QPushButton_clicked_connect);@]&#10;&#10;We can now directly pass &apos;&apos;QPushButton&apos;&apos; objects to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to install handlers for &apos;&apos;QPushButton_clicked&apos;&apos; to be invoked when buttons are clicked:&#10;&#10;[@QPushButton b1, b2;&#10;    {&#10;    //Make two QPushButton_clicked (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)s: this also emits the&#10;    //synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt; signal twice,&#10;    //each time triggering our installed handler which connects the Qt-native&#10;    //signal QPushButton::clicked to synapse::emit&lt;QPushButton_clicked&gt;.&#10;    boost::shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c1=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(&amp;b1,f1);&#10;    boost::shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c2=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(&amp;b2,f2);&#10;    ....&#10;    //Until c1 and c2 expire clicking b1 calls f1 and clicking b2 calls f2.&#10;    ....&#10;    }&#10;//At this point c1 and c2 have expired, emitting (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&#10;//twice again, each time triggering our intalled handler to disconnect the Qt-native signal.@]&#10;&#10;This documentation includes two complete example programs that illustrate the use of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; handlers:&#10;&#10;* &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;, and&#10;* &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;&#10;!!!Emitter lifetime safety&#10;&#10;Because the emitter object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; may have been destroyed by the time it is accessed by a handler of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; signal, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; can also take the emitter argument by &apos;&apos;weak_ptr&apos;&apos;:&#10;&#10;[@boost::shared_ptr&lt;my_button&gt; b(new my_button);&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(b,f);@]&#10;&#10;In this case the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; retains a copy of the passed &apos;&apos;weak_ptr&apos;&apos; which will be locked by a later call to &apos;&apos;c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;my_button&gt;()&apos;&apos; to return a &apos;&apos;shared_ptr&apos;&apos; to the emitter. If instead &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; was given a raw pointer, the &apos;&apos;shared_ptr&apos;&apos; returned by &apos;&apos;c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;my_button&gt;()&apos;&apos; still points to the emitter object but does not keep it afloat.&#10;&#10;!!!Emitter type safety&#10;&#10;The &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function template is type-safe: the type of the emitter object is captured at the time it is passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, and then &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; returns an empty &apos;&apos;shared_ptr&apos;&apos; if the type it is instantiated with is incompatible with the captured type.&#10;&#10;One complication with &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is that it is not aware of any possible implicit coversions if the emitter type is part of a class hierarchy. For example:&#10;&#10;[@boost::shared_ptr&lt;QPushButton&gt; b(....);&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(b,f);&#10;boost::shared_ptr&lt;QWidget&gt; w=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QWidget&gt;(); //fail@]&#10;&#10;We&apos;ve passed the emitter to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; as a &apos;&apos;QPushButton&apos;&apos;, and later—knowing that &apos;&apos;QWidget&apos;&apos; is a base class of &apos;&apos;QPushButton&apos;&apos;—we want to access it as a &apos;&apos;QWidget&apos;&apos;. Currently this is not supported; the only way to deal with this problem is to try different base types:&#10;&#10;[@if( boost::shared_ptr&lt;QPushButton&gt; b=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QPushButton&gt;() )&#10;    {&#10;    /* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) was given a QPushButton. */&#10;    }&#10;else if( boost::shared_ptr&lt;QWidget&gt; w=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QWidget&gt;() )&#10;    {&#10;    /* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) was given a QWidget. */&#10;    }&#10;else if( boost::shared_ptr&lt;QObject&gt; o=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QObject&gt;() )&#10;    {&#10;    /* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) was given a QObject. */&#10;    }&#10;else if( boost::shared_ptr&lt;void const&gt; p=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;void const&gt;() )&#10;    {&#10;    /* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) was given some other type. */&#10;    }&#10;else&#10;    {&#10;    /* Because any type can be accessed as void const,&#10;        hitting this &quot;else&quot; branch means that the emitter has expired. */&#10;    }@]&#10;&#10;Note however that &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; does handle const-ness correctly. For example, if &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; was passed a &apos;&apos;QPushButton&apos;&apos; emitter, it can be accessed as &apos;&apos;QPushButton&apos;&apos; and as &apos;&apos;QPushButton const&apos;&apos;, but if &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; was passed a &apos;&apos;QPushButton const&apos;&apos; then it can not be accessed as a &apos;&apos;QPushButton&apos;&apos;.&#10;&#10;!!!Blocking signals&#10;&#10;It is possible to block a specific signal for a specific emitter. While the signal is blocked, calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; are ignored:&#10;&#10;[@my_button b;&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b,f);&#10;    {&#10;    boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; blk=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b);&#10;    synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b); //Doesn&apos;t call any handlers, button_clicked is blocked.&#10;    }&#10;&#10;//Here blk has expired, unblocking the button_clicked signal for b.&#10;//The following call to emit will call the connected handlers.&#10;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b);@]&#10;&#10;In general, a signal will remain blocked for a given emitter until all &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; objects for that signal and that emitter have expired. Note that blocking a signal affects current as well as future connections:&#10;&#10;[@my_button b;&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; blk=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b);&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b,f);&#10;&#10;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b); //Doesn&apos;t call any handlers, button_clicked is blocked.@]&#10;&#10;In addition (similarly to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) there is a meta signal associated with &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. When a specific signal for a specific emitter transitions from being unblocked to being blocked, the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, passing &apos;&apos;true&apos;&apos; for its &apos;&apos;is_blocked&apos;&apos; argument. The signal is emitted again when the signal becomes unblocked and this time &apos;&apos;is_blocked&apos;&apos; is &apos;&apos;false&apos;&apos;. One possible use of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is to automatically reflect the blocked state of the signal in some user interface; see &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;&#10;!!!Multi-threading support&#10;&#10;Please see (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:).&#10;&#10;!!!Header-only emit&#10;&#10;If no signals are ever connected, &apos;&apos;emit&apos;&apos; is a no-op. For this reason, if a user library calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; but does not call &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, and if the program that links the user library does not call &apos;&apos;connect&apos;&apos; either, there is no need to link the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; library. As an example, a low level library that emits signals similar to &apos;&apos;report_progress&apos;&apos; (see the &apos;&apos;FILE&apos;&apos; example earlier on this page) can do so without requiring a client program that doesn&apos;t care about them to link &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;—yet other client programs that do connect and handle the signals will &quot;just work&quot; without needing to recompile the low level library.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;signal&quot; except_tags=&quot;noindex&quot; fmt=&quot;index&quot; sort_prefix=&quot;6&quot;:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>13</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;&apos;&apos;&apos;Q:&apos;&apos;&apos; How does &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; differ from &apos;&apos;(:link http://www.boost.org/doc/libs/release/doc/html/signals2.html|Boost Signals 2:)&apos;&apos;, which is also &quot;non-intrusive&quot;?&#10;&#10;-&gt;&apos;&apos;&apos;A:&apos;&apos;&apos; The main design difference is that in &apos;&apos;(:link http://www.boost.org/doc/libs/release/doc/html/signals2.html|Boost Signals 2:)&apos;&apos; emitting a signal requires a signal object. This is significant because in general it is not trivial to associate a &apos;&apos;(:link http://www.boost.org/doc/libs/release/doc/html/signals2.html|Boost Signals 2:)&apos;&apos; signal object with 3rd-party objects. When using &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; such association is not necessary because the 3rd-party object itself can be passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;&#10;&apos;&apos;&apos;Q:&apos;&apos;&apos; What is the design rationale for ignoring the value(s) returned by the connected functions?&#10;&#10;-&gt;&apos;&apos;&apos;A:&apos;&apos;&apos; A typical use case for &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is when the caller of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; doesn&apos;t care if there are 0, 1 or many connected functions. Allowing return values makes the zero/many case quite tricky to deal with. On the other hand, passing a reference or a (shared) pointer to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to return/accumulate values from any number of connected functions (if needed) is simpler and fits that case nicely. </string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>9</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;This function returns the meta emitter. Connecting (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;p&quot;:) from this emitter allows user code to take action when a particular signal is (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|connected/disconnected:) or (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|blocked/unblocked:). &#10;&#10;!!!!Note:&#10;&#10;The meta emitter is a singleton. It is created the first time &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is called.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>13</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;The Qt Wiki contains the following example on creating custom signals and slots:&#10;&#10;-&gt;(:link https://wiki.qt.io/Qt_for_Beginners#Creating_custom_signals_and_slots|https://wiki.qt.io/Qt_for_Beginners#Creating_custom_signals_and_slots:)&#10;&#10;It requires running the Qt Meta Object Compiler.&#10;&#10;Below is the same example, modified to use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to implement the custom &apos;&apos;counterReached&apos;&apos; signal. This approach does not require running the Qt Meta Object Compiler.&#10;&#10;The changes made to the original program are marked with //&lt;--.&#10;&#10;[@#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#define QT_NO_EMIT //Suppress the #define emit from Qt since it clashes with synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>.&#10;#include &lt;QtWidgets/QApplication&gt;&#10;#include &lt;QtWidgets/QPushButton&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;class Window : public QWidget&#10;{&#10;public:&#10;    explicit Window(QWidget *parent = 0);&#10;    signals: //&lt;-- Not needed with Synapse but okay&#10;    typedef struct counterReached_(*counterReached)(); //&lt;-- Was: void counterReached();&#10;private slots: //&lt;-- Not needed with Synapse but okay&#10;    void slotButtonClicked(bool checked);&#10;private:&#10;    int m_counter;&#10;    QPushButton *m_button;&#10;    boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; c_; //&lt;-- Needed to keep the synapse connection afloat.&#10;};&#10;&#10;Window::Window(QWidget *parent) :&#10;    QWidget(parent)&#10;{&#10;     // Set size of the window&#10;     setFixedSize(100, 50);&#10;&#10;    // Create and position the button&#10;    m_button = new QPushButton(&quot;Hello World&quot;, this);&#10;    m_button-&gt;setGeometry(10, 10, 80, 30);&#10;    m_button-&gt;setCheckable(true);&#10;&#10;    // Set the counter to 0&#10;    m_counter = 0;&#10;&#10;    connect(m_button,&amp;QPushButton::clicked,&#10;        [this]( bool checked )&#10;        {&#10;            slotButtonClicked(checked);&#10;        } ); //&lt;-- Was: connect(m_button, SIGNAL (clicked(bool)), this, SLOT (slotButtonClicked(bool)));&#10;    c_=synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;counterReached&gt;(this,&amp;QApplication::quit); //&lt;-- Was: connect(this, SIGNAL (counterReached()), QApplication::instance(), SLOT (quit()));&#10;}&#10;&#10;void Window::slotButtonClicked(bool checked)&#10;{&#10;    if (checked)&#10;        m_button-&gt;setText(&quot;Checked&quot;);&#10;    else&#10;        m_button-&gt;setText(&quot;Hello World&quot;);&#10;    m_counter ++;&#10;    if (m_counter == 10)&#10;        synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;counterReached&gt;(this); //&lt;-- Was: emit counterReached();&#10;}&#10;&#10;int main(int argc, char **argv)&#10;{&#10;    QApplication app (argc, argv);&#10;&#10;    Window window;&#10;    window.show();&#10;&#10;    return app.exec();&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>11</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;A &apos;&apos;shared_ptr&apos;&apos; that points the emitter that was passed to an overload of the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; function template to get the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object.&#10;&#10;!!!!Notes:&#10;&#10;* An empty &apos;&apos;shared_ptr&apos;&apos; is returned if:&#10;** &apos;&apos;T&apos;&apos; does not match the static type of the emitter passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;, or&#10;** the emitter was passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; as a &apos;&apos;shared/weak_ptr&apos;&apos; and it has expired.&#10;* If the emitter was passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; as a raw pointer, the returned &apos;&apos;shared_ptr&apos;&apos; points that emitter but does not (can not) keep it afloat.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>29</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;Connects the specified &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from the emitter &apos;&apos;e&apos;&apos; to the function object &apos;&apos;f&apos;&apos; and then emits &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; &apos;&apos;from the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. Handlers of the meta signal take a reference to the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object being created, and a second argument &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|flags:)&apos;&apos; which indicates whether the connection is beeing created or destroyed.&#10;&#10;The signal is considered disconnected when either of the following occurs:&#10;&#10;* The returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object expires, at which point the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; &apos;&apos; again, indicating that the connection is being destroyed;&#10;* The &apos;&apos;connection_lifetime&apos;&apos; weak_ptr expires (does not apply if &apos;&apos;weak_ptr&lt;void const&gt;()&apos;&apos; is passed for &apos;&apos;connection_lifetime&apos;&apos;);&#10;* The emitter expires.&#10;&#10;!!!!Warning:&#10;&#10;If &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is passed a raw pointer, deleting the emitter before the returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object has expired results in undefined behavior.&#10;&#10;!!!!Notes:&#10;&#10;* The returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object does not assume ownership of &apos;&apos;e&apos;&apos;: passing &apos;&apos;e&apos;&apos; as a &apos;&apos;shared_ptr&apos;&apos; is equivalent to passing a &apos;&apos;weak_ptr&apos;&apos;;&#10;* Use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to access &apos;&apos;e&apos;&apos; at a later time.</string>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>throws</string>
								<shared_ptr>
									<id>51</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>42</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>!!!!Throws:&#10;&#10;Any exception emitted by one of the connected function objects, in which case the remaining function objects are not called.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>synopsis</string>
								<shared_ptr>
									<id>52</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>42</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include def pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include def pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include def pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include def:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>17</size>
												<variant>2</variant>
												<string>(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include def:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;        namespace&#10;        meta&#10;            {&#10;(:include def pre_indent=&quot;12&quot;:)&#10;            }&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    class (:link www.boost.org/doc/libs/release/doc/html/any.html|any:);&#10;&#10;    namespace&#10;    synapse&#10;        {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include decl:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;        namespace&#10;        meta&#10;            {&#10;(:include def pre_indent=&quot;12&quot;:)&#10;            }&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>`#include &lt;boost/synapse/block.hpp&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;        namespace&#10;        meta&#10;            {&#10;(:include decl pre_indent=&quot;12&quot;:)&#10;            }&#10;        }&#10;    }@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include decl:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace&#10;boost&#10;    {&#10;    namespace&#10;    synapse&#10;        {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;        }&#10;    }@]&#10;</string>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
						</sorted>
					</object>
				</shared_ptr>
			</layers>
			<contexts>
				<shared_ptr>
					<id>53</id>
					<type>
						<string>reno_context_map</string>
					</type>
					<object>
						<contexts>
							<sorted>
								<size>42</size>
								<shared_ptr>
									<id>-5</id>
								</shared_ptr>
								<shared_ptr>
									<id>-6</id>
								</shared_ptr>
								<shared_ptr>
									<id>-7</id>
								</shared_ptr>
								<shared_ptr>
									<id>-8</id>
								</shared_ptr>
								<shared_ptr>
									<id>-9</id>
								</shared_ptr>
								<shared_ptr>
									<id>-10</id>
								</shared_ptr>
								<shared_ptr>
									<id>-11</id>
								</shared_ptr>
								<shared_ptr>
									<id>-12</id>
								</shared_ptr>
								<shared_ptr>
									<id>-13</id>
								</shared_ptr>
								<shared_ptr>
									<id>-14</id>
								</shared_ptr>
								<shared_ptr>
									<id>-15</id>
								</shared_ptr>
								<shared_ptr>
									<id>-16</id>
								</shared_ptr>
								<shared_ptr>
									<id>-17</id>
								</shared_ptr>
								<shared_ptr>
									<id>-18</id>
								</shared_ptr>
								<shared_ptr>
									<id>-19</id>
								</shared_ptr>
								<shared_ptr>
									<id>-20</id>
								</shared_ptr>
								<shared_ptr>
									<id>-21</id>
								</shared_ptr>
								<shared_ptr>
									<id>-22</id>
								</shared_ptr>
								<shared_ptr>
									<id>-23</id>
								</shared_ptr>
								<shared_ptr>
									<id>-24</id>
								</shared_ptr>
								<shared_ptr>
									<id>-25</id>
								</shared_ptr>
								<shared_ptr>
									<id>-26</id>
								</shared_ptr>
								<shared_ptr>
									<id>-27</id>
								</shared_ptr>
								<shared_ptr>
									<id>-28</id>
								</shared_ptr>
								<shared_ptr>
									<id>-29</id>
								</shared_ptr>
								<shared_ptr>
									<id>-30</id>
								</shared_ptr>
								<shared_ptr>
									<id>-31</id>
								</shared_ptr>
								<shared_ptr>
									<id>-32</id>
								</shared_ptr>
								<shared_ptr>
									<id>-33</id>
								</shared_ptr>
								<shared_ptr>
									<id>-34</id>
								</shared_ptr>
								<shared_ptr>
									<id>-35</id>
								</shared_ptr>
								<shared_ptr>
									<id>-36</id>
								</shared_ptr>
								<shared_ptr>
									<id>-37</id>
								</shared_ptr>
								<shared_ptr>
									<id>-38</id>
								</shared_ptr>
								<shared_ptr>
									<id>-39</id>
								</shared_ptr>
								<shared_ptr>
									<id>-40</id>
								</shared_ptr>
								<shared_ptr>
									<id>-41</id>
								</shared_ptr>
								<shared_ptr>
									<id>-42</id>
								</shared_ptr>
								<shared_ptr>
									<id>-43</id>
								</shared_ptr>
								<shared_ptr>
									<id>-44</id>
								</shared_ptr>
								<shared_ptr>
									<id>-45</id>
								</shared_ptr>
								<shared_ptr>
									<id>-46</id>
								</shared_ptr>
							</sorted>
						</contexts>
						<index>
							<sorted>
								<size>42</size>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-33</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-32</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-8</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-13</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-42</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-27</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-6</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-40</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-20</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-41</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-36</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-31</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>FC496AB68117923B42362965B8BE49E5F296F1392A0F6A730EB4B637A611C406</strong>
											<weak>711040374</weak>
											<size>3861</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connect.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-34</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>43F005A40F51D63A6A7C38AAD2A964B2E9A234416950F1C82995DAB668374614</strong>
											<weak>2271892227</weak>
											<size>2623</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\logger\logger.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-19</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>FE605B6C7B2776B3DA03BD90341F3EA017368E3B9F9EBC1EF06538D3E10BBB17</strong>
											<weak>412790480</weak>
											<size>2518</size>
											<position>517</position>
											<strong>3E0E4C56318057AB2BFE92CC4EC4D4ABE587CDCD907B75EECE3025219965E683</strong>
											<weak>1236510428</weak>
											<size>2490</size>
											<position>23</position>
											<strong>9DD7A04187DC80457C97CD89F9051BB3B7B935511BA44C973A9D90CD62DA6789</strong>
											<weak>2087926509</weak>
											<size>2090</size>
											<position>37</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\signal_traits.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-11</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>56583AA8F31389EC97F4D0495FC152D9CDBB1AC668DC93A6F5F636E354D74426</strong>
											<weak>992644081</weak>
											<size>506</size>
											<position>409</position>
											<strong>48CDCAAA9A1531EFDEDF57015DAD6C1C9D28681EEF0A3A734E3D65AAE4AA1154</strong>
											<weak>2888401917</weak>
											<size>478</size>
											<position>23</position>
											<strong>6FF116F68EDFC6D78ECEA4738F4C48FC47C965C6500F6637E6A79EF0C3732033</strong>
											<weak>671971629</weak>
											<size>432</size>
											<position>37</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-14</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>B80A94A0A99B4B6BD92DE6478A83DFBC07112005C197E13A40E4AD0163A25761</strong>
											<weak>2307084574</weak>
											<size>1848</size>
											<position>670</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\qt\qt_custom_signals.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-44</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>0D03FDCF42FBB688D3D660DD0F375841B4A38E73649F21EFDFF81AC3A8597662</strong>
											<weak>2197749326</weak>
											<size>1933</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-25</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>0C0E49AE2690008106DBBD734E5B51BCE4C5794658B05187FD15712179DFA96D</strong>
											<weak>2528774688</weak>
											<size>1639</size>
											<position>743</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\qt\qt_button.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-9</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>2EB95911340109AC66902D36226963283EC0E2D336CB19B96B9A74757A566D71</strong>
											<weak>1800028057</weak>
											<size>2773</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\block.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-35</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>EE925A185A514AE031555BD6988E9236F20833CD2F647E2F59D472ED05A7EA71</strong>
											<weak>3127568495</weak>
											<size>843</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\blocker.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-29</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>6C5E76A6F2DC66363F4BF5055813CE9AFCBE6F25DD60A91D7105C4D3D149A883</strong>
											<weak>3544852464</weak>
											<size>1193</size>
											<position>949</position>
											<strong>6591837D106941FB6EFFC8D07CB3376C7FA2107531FE989A4BFAA4E5ED33324F</strong>
											<weak>105652220</weak>
											<size>1165</size>
											<position>23</position>
											<strong>FF986FDDCA3229867121CD0EC7455E73EE003E062BCC9F8FB4B161D18A236396</strong>
											<weak>2501201157</weak>
											<size>269</size>
											<position>717</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-15</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>6C5E76A6F2DC66363F4BF5055813CE9AFCBE6F25DD60A91D7105C4D3D149A883</strong>
											<weak>3544852464</weak>
											<size>1193</size>
											<position>949</position>
											<strong>6591837D106941FB6EFFC8D07CB3376C7FA2107531FE989A4BFAA4E5ED33324F</strong>
											<weak>105652220</weak>
											<size>1165</size>
											<position>23</position>
											<strong>0693A3806DF544D3052F144C6B870687B59C19327B4AE62E3CE9AA980A2920B3</strong>
											<weak>3167300470</weak>
											<size>169</size>
											<position>986</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-37</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>6C5E76A6F2DC66363F4BF5055813CE9AFCBE6F25DD60A91D7105C4D3D149A883</strong>
											<weak>3544852464</weak>
											<size>1193</size>
											<position>949</position>
											<strong>6591837D106941FB6EFFC8D07CB3376C7FA2107531FE989A4BFAA4E5ED33324F</strong>
											<weak>105652220</weak>
											<size>1165</size>
											<position>23</position>
											<strong>9E2DAD7B5FD60650F9F549C6D9B2D6FA57EEB55BCBFB5182EEA13A721EB1B1C6</strong>
											<weak>1636776058</weak>
											<size>207</size>
											<position>510</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-21</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>D02A7E77C8E2C4AB9D697012E9371E0AA62C4ACC08F115E111EA1BF6C92330A4</strong>
											<weak>2209823914</weak>
											<size>6567</size>
											<position>1411</position>
											<strong>2EA2A187A019B693D6F50839434DC588B3746B4D189690442831625D95D57F04</strong>
											<weak>3610719414</weak>
											<size>6539</size>
											<position>23</position>
											<strong>1CDC896A7D78E2FB3BFEEBE44178CEE95D80B1C97D42ACD813B1A2B26A4BF7C2</strong>
											<weak>1098320166</weak>
											<size>1689</size>
											<position>4840</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\emit.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-24</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>32E9802FDB86BEC83A95A6B43A74009E834500D1F0D09CCB89B104B1FDDDF6A4</strong>
											<weak>1166458703</weak>
											<size>1470</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\callback_api\synapsify.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-17</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>BF6FB1CD96D3B5352B4F7C5B60417D12D87ED82E67F5EB7AEA0E2031A13D41A6</strong>
											<weak>501991863</weak>
											<size>1328</size>
											<position>348</position>
											<strong>0F62CD540F4AE2D2D21A26273672EEF5095115AD94D2E7827A8EC4B84FD9374C</strong>
											<weak>3746087363</weak>
											<size>1300</size>
											<position>23</position>
											<strong>CB60F1646E83BEFA50F9309A24F075B5670136F4BFB1A097FEE5F9F8FC3F8199</strong>
											<weak>554350323</weak>
											<size>1254</size>
											<position>37</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\translate.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-30</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>B95C26B84ADF1D874639CCD0A55F89EABB6F062C522E3A0BB0D3A2C030D96BB8</strong>
											<weak>2848284123</weak>
											<size>360</size>
											<position>417</position>
											<strong>FABECA297659F3A16F0D9C7A3827E5A556FD562286AD57DEE870EB96C481379F</strong>
											<weak>577918439</weak>
											<size>332</size>
											<position>23</position>
											<strong>29C4AA90E6292B0AFBA4C749F88054FD5EB21C3D403A4A606172580A32762AB0</strong>
											<weak>3067366167</weak>
											<size>286</size>
											<position>37</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\blocker.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-7</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>4</size>
											<strong>B95C26B84ADF1D874639CCD0A55F89EABB6F062C522E3A0BB0D3A2C030D96BB8</strong>
											<weak>2848284123</weak>
											<size>360</size>
											<position>417</position>
											<strong>FABECA297659F3A16F0D9C7A3827E5A556FD562286AD57DEE870EB96C481379F</strong>
											<weak>577918439</weak>
											<size>332</size>
											<position>23</position>
											<strong>29C4AA90E6292B0AFBA4C749F88054FD5EB21C3D403A4A606172580A32762AB0</strong>
											<weak>3067366167</weak>
											<size>286</size>
											<position>37</position>
											<strong>F67DCA4DD04A884B88C9E2C7EB4A9FF32CD91D3BE7FB2978ACC345C4BFFC5866</strong>
											<weak>603329297</weak>
											<size>62</size>
											<position>210</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\blocker.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-45</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>4</size>
											<strong>B2A162F5C5320B046784A19C268B969B2A30AA397FDD08DDEFBD267FAAEAFFB8</strong>
											<weak>1189655063</weak>
											<size>1448</size>
											<position>400</position>
											<strong>66967F26A1FCC712BC1FCD8A79B22C887041ED8F7866A7DEF1FF5CA54BBCD175</strong>
											<weak>1458416163</weak>
											<size>1420</size>
											<position>23</position>
											<strong>74621BE96E25F54775629D18A6AF866BA55994DF6B9DD7F5B9D23989F4D6505E</strong>
											<weak>1353223946</weak>
											<size>551</size>
											<position>860</position>
											<strong>AEA004D825B782299D8496BA361CD6D7F94A9EAB579796DC0ED7B6BD7D98425E</strong>
											<weak>2359899403</weak>
											<size>204</size>
											<position>334</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connect.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-38</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>5</size>
											<strong>B2A162F5C5320B046784A19C268B969B2A30AA397FDD08DDEFBD267FAAEAFFB8</strong>
											<weak>1189655063</weak>
											<size>1448</size>
											<position>400</position>
											<strong>66967F26A1FCC712BC1FCD8A79B22C887041ED8F7866A7DEF1FF5CA54BBCD175</strong>
											<weak>1458416163</weak>
											<size>1420</size>
											<position>23</position>
											<strong>74621BE96E25F54775629D18A6AF866BA55994DF6B9DD7F5B9D23989F4D6505E</strong>
											<weak>1353223946</weak>
											<size>551</size>
											<position>860</position>
											<strong>F269835FB1B3D292D3EC9593A2C77075EB374DEFA5B19EF02296DD0CE8431B96</strong>
											<weak>1693863563</weak>
											<size>288</size>
											<position>46</position>
											<strong>659B4B51C98C68DAE7BEC98106A757873659EF590CEE20D7040AE02DE6546AAD</strong>
											<weak>611192271</weak>
											<size>46</size>
											<position>1</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connect.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-43</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>D3047C9C93BEB5A056747D0E9086F87BB3CA98EE625BA732918DEC00B7A476C3</strong>
											<weak>3244532941</weak>
											<size>2188</size>
											<position>1882</position>
											<strong>24EF440227F7A952D4CAC3BE68B908B1A47F12982C018FAAF6A02372E4F8E2D7</strong>
											<weak>470850777</weak>
											<size>2160</size>
											<position>23</position>
											<strong>DE916ADD42CE8F1645C8D5B68914EB19D0AC872EACC6026266EFDE095609772F</strong>
											<weak>14906591</weak>
											<size>1138</size>
											<position>1012</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connect.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-46</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>D5439F3485661082195929C39639B58C4857D3D3DCB757D4D72EFF85C2231ECA</strong>
											<weak>2344619350</weak>
											<size>7561</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\translate.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-16</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>01C7065919AE94CD44E819D5D6D4FB42E164920EEF50AD80C298EB97848E96CA</strong>
											<weak>3044633644</weak>
											<size>364</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\thread_local_queue.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-26</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>6523BDA3D191FBCFAB1A6E87A70555C32B1CA614203831AD33B9A4966CD2BACC</strong>
											<weak>1731899969</weak>
											<size>7769</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\emit.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-5</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>CEF10F6B4AEEAA8DDCFE231D0BDDAAE0227A783FAE75416E2E1DE1242D57F5CE</strong>
											<weak>3406893859</weak>
											<size>2826</size>
											<position>217</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\signal_traits.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-10</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>0DE0EC05E3CF38F783C01C9DD1CF5FF111A28C68C800D136743E5027C6E76AD3</strong>
											<weak>1015613561</weak>
											<size>894</size>
											<position>417</position>
											<strong>89B515CC017FF2CD123113BDC1C631BED3571383A4F3A692773F28CEB67DAA64</strong>
											<weak>1126432901</weak>
											<size>866</size>
											<position>23</position>
											<strong>5D7E1E3B88F7A14D6EF7E4D935D88BA44EC13257AA433326ABBC20FE2BACD7B0</strong>
											<weak>1261320827</weak>
											<size>249</size>
											<position>608</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\block.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-22</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>29B77E2347106D04911D19607A7FC0F7251D69D633DECC1FE465E2F6CF2D73D3</strong>
											<weak>1983179288</weak>
											<size>1637</size>
											<position>1345</position>
											<strong>2A55A60442043EC3325EAFB18DA4CE02014F22706372BC9FA022BCD2B96DCADA</strong>
											<weak>423289380</weak>
											<size>1609</size>
											<position>23</position>
											<strong>CF9F97D2C2BE665EFBF1D9FA027D4226C8A4FE54DCE5E0764C82FEEF5FCDAF8F</strong>
											<weak>2678070751</weak>
											<size>910</size>
											<position>689</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\block.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-39</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>8428D66EC4651D0F45C12C24AE0CCCDDFBCF3E2730CAE383A84DBDEDE40FDFDB</strong>
											<weak>3048070757</weak>
											<size>14331</size>
											<position>431</position>
											<strong>47D51CDD5357B4ECC3A088E09E4F13D1B8E15FB7DC79BDCA9B7F8183B7070ED4</strong>
											<weak>856151665</weak>
											<size>14303</size>
											<position>23</position>
											<strong>6812FEAEF4EDA3DBC98EAD484EE20C5AF8AC15582D8286C47964FB485BAA2026</strong>
											<weak>554769116</weak>
											<size>112</size>
											<position>14182</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\src\thread_local_queue.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-23</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>8428D66EC4651D0F45C12C24AE0CCCDDFBCF3E2730CAE383A84DBDEDE40FDFDB</strong>
											<weak>3048070757</weak>
											<size>14331</size>
											<position>431</position>
											<strong>47D51CDD5357B4ECC3A088E09E4F13D1B8E15FB7DC79BDCA9B7F8183B7070ED4</strong>
											<weak>856151665</weak>
											<size>14303</size>
											<position>23</position>
											<strong>744CC5F03F6D21A472683AB8D34D1B63623DB82A6DFF4B3F14695DD522305BEA</strong>
											<weak>2976067040</weak>
											<size>157</size>
											<position>14025</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\src\thread_local_queue.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-18</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>5F5CCEA3127C9A9F407A3E8A8B427377F1C266632BDCCCA6C2070FEB8E0617F0</strong>
											<weak>3958246451</weak>
											<size>3429</size>
											<position>468</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\win\win_WindowProc.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-28</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>C62798EE9AD78E893B735CA424E157B4429CBED44E281A26C39EB94083E055FB</strong>
											<weak>1905580406</weak>
											<size>3886</size>
											<position>626</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\qt\qt_meta_block.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-12</id>
									</shared_ptr>
								</pair>
							</sorted>
						</index>
					</object>
				</shared_ptr>
			</contexts>
			<index>
				<shared_ptr>
					<id>54</id>
					<type>
						<string>tag_index</string>
					</type>
					<object>
						<tag_index>
							<sorted>
								<size>31</size>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-5</id>
										</shared_ptr>
									</weak_ptr>
									<string>header</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-6</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-7</id>
										</shared_ptr>
									</weak_ptr>
									<string>type</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-8</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-9</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-11</id>
										</shared_ptr>
									</weak_ptr>
									<string>type</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-12</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-13</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-14</id>
										</shared_ptr>
									</weak_ptr>
									<string>type</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-15</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-17</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-18</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-19</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-21</id>
										</shared_ptr>
									</weak_ptr>
									<string>function member</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-22</id>
										</shared_ptr>
									</weak_ptr>
									<string>signal</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-23</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-24</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-25</id>
										</shared_ptr>
									</weak_ptr>
									<string>header</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-28</id>
										</shared_ptr>
									</weak_ptr>
									<string>example windows</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-30</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-32</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-34</id>
										</shared_ptr>
									</weak_ptr>
									<string>header</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-37</id>
										</shared_ptr>
									</weak_ptr>
									<string>function member</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-38</id>
										</shared_ptr>
									</weak_ptr>
									<string>signal</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-39</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-40</id>
										</shared_ptr>
									</weak_ptr>
									<string>tutorial</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-41</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-43</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-44</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-45</id>
										</shared_ptr>
									</weak_ptr>
									<string>function member</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-46</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
							</sorted>
						</tag_index>
					</object>
				</shared_ptr>
			</index>
		</reno_project>
	</object>
</shared_ptr>
