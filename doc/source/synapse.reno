<shared_ptr>
	<id>1</id>
	<type>
		<string>reno_project</string>
	</type>
	<object>
		<reno_project>
			<config>
				<shared_ptr>
					<id>2</id>
					<type>
						<string>reno_config</string>
					</type>
					<object>
						<source>
							<string>../../include;../../src;../../example</string>
						</source>
						<match>
							<string>.*\.(cpp|hpp|h)$</string>
						</match>
					</object>
				</shared_ptr>
			</config>
			<layers>
				<shared_ptr>
					<id>3</id>
					<type>
						<string>reno_layer_map</string>
					</type>
					<object>
						<sorted>
							<size>7</size>
							<pair>
								<string>default</string>
								<shared_ptr>
									<id>4</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>45</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>5</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>B80A94A0A99B4B6BD92DE6478A83DFBC07112005C197E13A40E4AD0163A25761</strong>
																		<weak>2307084574</weak>
																		<size>1848</size>
																		<position>675</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\qt\qt_custom_signals.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>adding custom signals to Qt objects without MOCing</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>6</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>5DD2BB9435F95C7283F4A649AB8EF350370910A4FB3A357E158C2350A77B9DCD</strong>
																		<weak>692812247</weak>
																		<size>2222</size>
																		<position>222</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\block.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/block.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>7</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>5F875D9AEA183876EA5BCA205A7FE13159C15D7172DC9E9AC8FA4F1270907553</strong>
																		<weak>4043876558</weak>
																		<size>1377</size>
																		<position>222</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\callback_api\synapsify.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>using meta signals to connect to a C-style callback API</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>8</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>2FE74A047180F337E96F7FFEE8A56CB9E476E9C772366508BEE885B3D12B06DE</strong>
																		<weak>1982380076</weak>
																		<size>645</size>
																		<position>414</position>
																		<strong>B5CEB3EADBCAEE48073A60560D8D35E959668791C4E5545704B21E73E667E041</strong>
																		<weak>454471736</weak>
																		<size>617</size>
																		<position>23</position>
																		<strong>A733CD1695F2FF9359415D1DB59ABF392EC26BB770F538A22B40640E332E3F5D</strong>
																		<weak>3523847528</weak>
																		<size>571</size>
																		<position>37</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connection</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>9</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>2E6BA8A6B14673B09376A14D42F8A8CF6E6CB843D09544FBA5F3512763C3B2C4</strong>
																		<weak>3649614361</weak>
																		<size>9137</size>
																		<position>222</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connect.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/connect.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>10</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Index of functions</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>11</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>EF31C60B9329DE3FC67E6E5188EC990CB3FA9F755209829FB941CFCB89C1263B</strong>
																		<weak>1496066151</weak>
																		<size>2600</size>
																		<position>405</position>
																		<strong>2B1E6A822EAECAD4AC29894C1FCBB083B3B7307C4768C3A4ADA7DB572D8E69DD</strong>
																		<weak>2026971251</weak>
																		<size>2572</size>
																		<position>23</position>
																		<strong>5FF1188B5FBFA13AE95C79E54127068B3D243E57E9FE8AAF55839B943F4F1E27</strong>
																		<weak>1163676303</weak>
																		<size>1792</size>
																		<position>64</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connect.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connect</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>12</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>4</size>
																		<strong>7EA988ABB15DE727B4C55E553BB2055DF2F1EF6836B3EB59CD1A5F9B9C96895D</strong>
																		<weak>1204734376</weak>
																		<size>16342</size>
																		<position>793</position>
																		<strong>870022F4C5938A07287577490BF47280CC1D4EA6AEF7F7FA13AB44F5907BA902</strong>
																		<weak>3654795700</weak>
																		<size>16314</size>
																		<position>23</position>
																		<strong>F9FE180D635480736984D39CF51A73F5F7B2F4F9D8220B8FE4D1A5366D859C12</strong>
																		<weak>2526584735</weak>
																		<size>1611</size>
																		<position>14178</position>
																		<strong>55CDD0F9BCA8CD6951E0D1E20C010093B979F0DCB783A1927568DDF2B89F18E3</strong>
																		<weak>35531192</weak>
																		<size>184</size>
																		<position>1413</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\src\thread_local_queue.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>post</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>13</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Examples</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>14</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>C36FA3453D59F802E18FCCA26A79598BFEA9BBCDE0665B23EAE3D12D874E812A</strong>
																		<weak>1707194686</weak>
																		<size>666</size>
																		<position>422</position>
																		<strong>3F58837DDDD7D7BFB418EC058E6608922BCFFA9395CF2B94F45712446736822B</strong>
																		<weak>1926410570</weak>
																		<size>638</size>
																		<position>23</position>
																		<strong>5D7E1E3B88F7A14D6EF7E4D935D88BA44EC13257AA433326ABBC20FE2BACD7B0</strong>
																		<weak>1261320827</weak>
																		<size>249</size>
																		<position>380</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\block.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>meta::blocked</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>15</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>3F054A2798BD7A49A4F13B2DC0B35FFE908F159DB7C3058EA318CA92E97DFBB3</strong>
																		<weak>2943710097</weak>
																		<size>1314</size>
																		<position>1122</position>
																		<strong>5B3778C26FEFAE4FF73168CD9CF40D987485D807FD746939CB98D391EC79B11C</strong>
																		<weak>3601623965</weak>
																		<size>1286</size>
																		<position>23</position>
																		<strong>EA5656125969D525ECB4D6B5A6B68A80A463FC3155238F19FC3A9AF8A6B4D374</strong>
																		<weak>3474895969</weak>
																		<size>622</size>
																		<position>654</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\block.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>block</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>16</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>CB334305EA5F00D522E05FE3E0E3EDEC6AFC340BA5E02BB7FB15C8F7A02BAF74</strong>
																		<weak>2340181685</weak>
																		<size>2243</size>
																		<position>222</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/connection.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>17</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>9328BAB771DED321380C9470AFF8081ADFE2BC15FD5C0301FA6A5D356BB29C00</strong>
																		<weak>3343537180</weak>
																		<size>1364</size>
																		<position>1093</position>
																		<strong>1055A605649176372CD07175BD86932E171B19693E93E586FF80D07049BAC68F</strong>
																		<weak>1358253096</weak>
																		<size>1336</size>
																		<position>23</position>
																		<strong>0693A3806DF544D3052F144C6B870687B59C19327B4AE62E3CE9AA980A2920B3</strong>
																		<weak>3167300470</weak>
																		<size>169</size>
																		<position>986</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connection::emitter</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>18</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>5</size>
																		<strong>7EA988ABB15DE727B4C55E553BB2055DF2F1EF6836B3EB59CD1A5F9B9C96895D</strong>
																		<weak>1204734376</weak>
																		<size>16342</size>
																		<position>793</position>
																		<strong>870022F4C5938A07287577490BF47280CC1D4EA6AEF7F7FA13AB44F5907BA902</strong>
																		<weak>3654795700</weak>
																		<size>16314</size>
																		<position>23</position>
																		<strong>F9FE180D635480736984D39CF51A73F5F7B2F4F9D8220B8FE4D1A5366D859C12</strong>
																		<weak>2526584735</weak>
																		<size>1611</size>
																		<position>14178</position>
																		<strong>65307D19154BE057A2D7F6CAA6A1F51FEE0926CCC5167E74F26AF75D1EB3F796</strong>
																		<weak>4272630222</weak>
																		<size>182</size>
																		<position>1049</position>
																		<strong>DEDF1FF46515F89B2D8A391940944DED4BF562E89C797EF5817864504D0204CB</strong>
																		<weak>631842631</weak>
																		<size>164</size>
																		<position>1</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\src\thread_local_queue.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>poll</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>19</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Index of meta signals</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>20</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>7982393CAB22B16067BFA9B3156CC9BDADA9EE495819CE14E56FEF8CCCFBBF9E</strong>
																		<weak>2710486261</weak>
																		<size>2007</size>
																		<position>353</position>
																		<strong>E84DAE2774D4303FBAABA7209DE22071EC6D057A5DF7DCAF806CF10E1B6176AF</strong>
																		<weak>1356641537</weak>
																		<size>1979</size>
																		<position>23</position>
																		<strong>F90DFD460AABC9363EB7E8450EC8B4C74E1B8EDE601213133FC925F8D7ECB9B9</strong>
																		<weak>1905502769</weak>
																		<size>1933</size>
																		<position>37</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\translate.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>translate</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>21</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>9328BAB771DED321380C9470AFF8081ADFE2BC15FD5C0301FA6A5D356BB29C00</strong>
																		<weak>3343537180</weak>
																		<size>1364</size>
																		<position>1093</position>
																		<strong>1055A605649176372CD07175BD86932E171B19693E93E586FF80D07049BAC68F</strong>
																		<weak>1358253096</weak>
																		<size>1336</size>
																		<position>23</position>
																		<strong>FF986FDDCA3229867121CD0EC7455E73EE003E062BCC9F8FB4B161D18A236396</strong>
																		<weak>2501201157</weak>
																		<size>269</size>
																		<position>717</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connection::get_user_data</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>22</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>5</size>
																		<strong>EF31C60B9329DE3FC67E6E5188EC990CB3FA9F755209829FB941CFCB89C1263B</strong>
																		<weak>1496066151</weak>
																		<size>2600</size>
																		<position>405</position>
																		<strong>2B1E6A822EAECAD4AC29894C1FCBB083B3B7307C4768C3A4ADA7DB572D8E69DD</strong>
																		<weak>2026971251</weak>
																		<size>2572</size>
																		<position>23</position>
																		<strong>8199B8F6D177A6C02D9EA061D6DE83D6B75A482F07AA664BA8A8602DC86B0244</strong>
																		<weak>2880212539</weak>
																		<size>549</size>
																		<position>2014</position>
																		<strong>F55B4BA2CF2A574A5EE4E616F057B596E57D6243D337AA3D4C62F6CF462D0E4C</strong>
																		<weak>2199539132</weak>
																		<size>286</size>
																		<position>46</position>
																		<strong>CD33B81608FB6278E5F0CA7C54F94289FB1975BB004700CFEAA0E48E5CBEA35E</strong>
																		<weak>104860928</weak>
																		<size>44</size>
																		<position>1</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connect.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>meta::emitter</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>23</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Signal</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>24</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>5</size>
																		<strong>7EA988ABB15DE727B4C55E553BB2055DF2F1EF6836B3EB59CD1A5F9B9C96895D</strong>
																		<weak>1204734376</weak>
																		<size>16342</size>
																		<position>793</position>
																		<strong>870022F4C5938A07287577490BF47280CC1D4EA6AEF7F7FA13AB44F5907BA902</strong>
																		<weak>3654795700</weak>
																		<size>16314</size>
																		<position>23</position>
																		<strong>F9FE180D635480736984D39CF51A73F5F7B2F4F9D8220B8FE4D1A5366D859C12</strong>
																		<weak>2526584735</weak>
																		<size>1611</size>
																		<position>14178</position>
																		<strong>E323986C471E09BD4BD7F95374B77B4106C5D949713261F3E9C4CEBA7F2878DA</strong>
																		<weak>1864392306</weak>
																		<size>339</size>
																		<position>601</position>
																		<strong>C6732855C088156D511D2D1A1E6F6DD17FEE8E42191D1B554FFB5C01379E3DF9</strong>
																		<weak>4219296303</weak>
																		<size>319</size>
																		<position>21</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\src\thread_local_queue.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>create_thread_local_queue</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>25</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Building</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>26</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>32D33467B16B5BA958CC6615C7FC0E663A386FBA3F64655EB82D9C46FA1AAADE</strong>
																		<weak>2240674033</weak>
																		<size>7104</size>
																		<position>222</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\translate.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/translate.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>27</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>CDE12538C11E298FBB8FAAD030BC27611CFD1B3FC2BD43FE982F435E90AA3BE1</strong>
																		<weak>1393553026</weak>
																		<size>3281</size>
																		<position>473</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\win\win_WindowProc.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>handling events from an OS message pump</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>28</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Boost Synapse</string>
															</title>
															<file_name>
																<string>index</string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>29</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>interthread communication support</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>30</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>questions and answers</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>31</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>08F7428EE8AE5D1F7E0F931D8A9E5A79B60AD1B0687A431DAB46F20ECBCB371F</strong>
																		<weak>362800389</weak>
																		<size>1543</size>
																		<position>735</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\qt\qt_button.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>using meta signals with QPushButton</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>32</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>9328BAB771DED321380C9470AFF8081ADFE2BC15FD5C0301FA6A5D356BB29C00</strong>
																		<weak>3343537180</weak>
																		<size>1364</size>
																		<position>1093</position>
																		<strong>1055A605649176372CD07175BD86932E171B19693E93E586FF80D07049BAC68F</strong>
																		<weak>1358253096</weak>
																		<size>1336</size>
																		<position>23</position>
																		<strong>185064014AFA8DBCF93C49C269FE40A4E147A7ACCB87A5C442688A69CDB066B5</strong>
																		<weak>570305580</weak>
																		<size>171</size>
																		<position>1155</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connection::receiver</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>33</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>B95C26B84ADF1D874639CCD0A55F89EABB6F062C522E3A0BB0D3A2C030D96BB8</strong>
																		<weak>2848284123</weak>
																		<size>360</size>
																		<position>422</position>
																		<strong>FABECA297659F3A16F0D9C7A3827E5A556FD562286AD57DEE870EB96C481379F</strong>
																		<weak>577918439</weak>
																		<size>332</size>
																		<position>23</position>
																		<strong>29C4AA90E6292B0AFBA4C749F88054FD5EB21C3D403A4A606172580A32762AB0</strong>
																		<weak>3067366167</weak>
																		<size>286</size>
																		<position>37</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\blocker.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>blocker</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>34</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>128715D9230240A8E2B644DB3C5F53B00D55B694FD1E816E42030DC29920AA8E</strong>
																		<weak>2730984838</weak>
																		<size>418</size>
																		<position>477</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\thread_local_queue.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/thread_local_queue.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>35</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>56BF554524F22BC5B5C4F2A41A3D1F9341467BA96B6F75C9C193FAA5A2B79297</strong>
																		<weak>1025875720</weak>
																		<size>3369</size>
																		<position>222</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\emit.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/emit.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>36</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>2F795947D471550A74E1CEE3463A459C20C7BA1AD0C1D671986446584EA2DC44</strong>
																		<weak>3732413390</weak>
																		<size>2415</size>
																		<position>222</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\logger\logger.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>building a simple logging system</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>37</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>847ED929EE424A5DAE33775BDE064CFB67C16EC2C81067293649FE3D189B073F</strong>
																		<weak>2494667264</weak>
																		<size>3745</size>
																		<position>643</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\example\qt\qt_meta_block.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>using meta signals to respond to signals being blocked or unblocked</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>38</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Comparison between Boost.Signals2 and Synapse</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>39</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>EF31C60B9329DE3FC67E6E5188EC990CB3FA9F755209829FB941CFCB89C1263B</strong>
																		<weak>1496066151</weak>
																		<size>2600</size>
																		<position>405</position>
																		<strong>2B1E6A822EAECAD4AC29894C1FCBB083B3B7307C4768C3A4ADA7DB572D8E69DD</strong>
																		<weak>2026971251</weak>
																		<size>2572</size>
																		<position>23</position>
																		<strong>17715869015C424D22A073452406365D186077C4AD1B71446E539DB33890646C</strong>
																		<weak>1021588752</weak>
																		<size>156</size>
																		<position>1857</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connect.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>release</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>40</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Index of types</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>41</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Tutorial</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>42</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>9328BAB771DED321380C9470AFF8081ADFE2BC15FD5C0301FA6A5D356BB29C00</strong>
																		<weak>3343537180</weak>
																		<size>1364</size>
																		<position>1093</position>
																		<strong>1055A605649176372CD07175BD86932E171B19693E93E586FF80D07049BAC68F</strong>
																		<weak>1358253096</weak>
																		<size>1336</size>
																		<position>23</position>
																		<strong>9E2DAD7B5FD60650F9F549C6D9B2D6FA57EEB55BCBFB5182EEA13A721EB1B1C6</strong>
																		<weak>1636776058</weak>
																		<size>207</size>
																		<position>510</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connection.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>connection::set_user_data</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>43</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Synopsis</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>44</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>B0AFBDC922702E0A33AEEC9133527D3CB2C69689AD6AB1FFC130CFFE337C7534</strong>
																		<weak>3138398671</weak>
																		<size>157</size>
																		<position>460</position>
																		<strong>0F9E501D75A90AC4DCA92D68FECA501AEAE96730BCF52BB996A0C46913B83996</strong>
																		<weak>3925090779</weak>
																		<size>129</size>
																		<position>23</position>
																		<strong>910621165CF3843ECC720AC64A23AB83E0387DE8BA0CCA7B6F7B91A4021060D1</strong>
																		<weak>3820033803</weak>
																		<size>83</size>
																		<position>37</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\emit.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>emit</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>45</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>4</size>
																		<strong>7EA988ABB15DE727B4C55E553BB2055DF2F1EF6836B3EB59CD1A5F9B9C96895D</strong>
																		<weak>1204734376</weak>
																		<size>16342</size>
																		<position>793</position>
																		<strong>870022F4C5938A07287577490BF47280CC1D4EA6AEF7F7FA13AB44F5907BA902</strong>
																		<weak>3654795700</weak>
																		<size>16314</size>
																		<position>23</position>
																		<strong>F9FE180D635480736984D39CF51A73F5F7B2F4F9D8220B8FE4D1A5366D859C12</strong>
																		<weak>2526584735</weak>
																		<size>1611</size>
																		<position>14178</position>
																		<strong>3DE78F48F2221353AE50B85929C56AC7F5EF0EE9364332A4E71B7D1BABFC454E</strong>
																		<weak>4248512970</weak>
																		<size>182</size>
																		<position>1231</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\src\thread_local_queue.cpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>wait</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>46</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>3</size>
																		<strong>EF31C60B9329DE3FC67E6E5188EC990CB3FA9F755209829FB941CFCB89C1263B</strong>
																		<weak>1496066151</weak>
																		<size>2600</size>
																		<position>405</position>
																		<strong>2B1E6A822EAECAD4AC29894C1FCBB083B3B7307C4768C3A4ADA7DB572D8E69DD</strong>
																		<weak>2026971251</weak>
																		<size>2572</size>
																		<position>23</position>
																		<strong>8199B8F6D177A6C02D9EA061D6DE83D6B75A482F07AA664BA8A8602DC86B0244</strong>
																		<weak>2880212539</weak>
																		<size>549</size>
																		<position>2014</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\connect.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>meta::connected</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>47</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>0</size>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>1</empty>
																	</path>
																</file>
															</hook>
															<title>
																<string>Index of headers</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>48</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>4</size>
																		<strong>B95C26B84ADF1D874639CCD0A55F89EABB6F062C522E3A0BB0D3A2C030D96BB8</strong>
																		<weak>2848284123</weak>
																		<size>360</size>
																		<position>422</position>
																		<strong>FABECA297659F3A16F0D9C7A3827E5A556FD562286AD57DEE870EB96C481379F</strong>
																		<weak>577918439</weak>
																		<size>332</size>
																		<position>23</position>
																		<strong>29C4AA90E6292B0AFBA4C749F88054FD5EB21C3D403A4A606172580A32762AB0</strong>
																		<weak>3067366167</weak>
																		<size>286</size>
																		<position>37</position>
																		<strong>F67DCA4DD04A884B88C9E2C7EB4A9FF32CD91D3BE7FB2978ACC345C4BFFC5866</strong>
																		<weak>603329297</weak>
																		<size>62</size>
																		<position>210</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\blocker.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>blocker::emitter</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>49</id>
														<type>
															<string>reno_context</string>
														</type>
														<object>
															<hook>
																<hook>
																	<stream_hook_path>
																		<size>1</size>
																		<strong>EE925A185A514AE031555BD6988E9236F20833CD2F647E2F59D472ED05A7EA71</strong>
																		<weak>3127568495</weak>
																		<size>843</size>
																		<position>222</position>
																	</stream_hook_path>
																</hook>
																<file>
																	<path>
																		<empty>0</empty>
																		<string>..\..\include\boost\synapse\blocker.hpp</string>
																		<type>0</type>
																		<base>0</base>
																	</path>
																</file>
															</hook>
															<title>
																<string>boost/synapse/blocker.hpp</string>
															</title>
															<file_name>
																<string></string>
															</file_name>
														</object>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include include:)&#10;(:auto also:)&#10;</string>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>def</string>
								<shared_ptr>
									<id>50</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>45</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>11</size>
												<variant>2</variant>
												<string>[@class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;{&#10;protected:&#10;&#10;    connection();&#10;    ~connection();&#10;&#10;public:&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl pre_indent=&quot;4&quot;:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl pre_indent=&quot;4&quot;:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def pre_indent=&quot;4&quot;:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def pre_indent=&quot;4&quot;:)&#10;};@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>7</size>
												<variant>2</variant>
												<string>[@template &lt;class Signal&gt;&#10;struct (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&#10;{&#10;    typedef (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;Signal&gt;(*type)( (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; eb, bool is_blocked );&#10;};@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt;&#10;T * (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)() const;@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>[@class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;{&#10;protected:&#10;&#10;    blocker();&#10;    ~blocker();&#10;&#10;public:&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-48</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl pre_indent=&quot;4&quot;:)&#10;};@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt;&#10;void (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)( shared_ptr&lt;T&gt; const &amp; data );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>7</size>
												<variant>2</variant>
												<string>[@namespace connect_flags&#10;{&#10;    unsigned const connecting=1;&#10;    unsigned const first_for_this_emitter=2;&#10;    unsigned const last_for_this_emitter=4;&#10;}&#10;&#10;template &lt;class Signal&gt;&#10;struct (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&#10;{&#10;    typedef (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;Signal&gt;(*type)( (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; c, unsigned flags );&#10;};@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-47</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-48</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>api</string>
								<shared_ptr>
									<id>51</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>45</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>7</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>11</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;namespace meta&#10;{&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl pre_indent=&quot;4&quot;:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def pre_indent=&quot;4&quot;:)&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>9</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> decl:)@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-47</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-48</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> def:)@]&#10;</string>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>decl</string>
								<shared_ptr>
									<id>52</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>45</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:);@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>73</size>
												<variant>2</variant>
												<string>[@template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class F&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( Emitter * e, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;Emitter&gt; const &amp; e, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;Emitter&gt; const &amp; e, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class Receiver,class F&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( Emitter * e, Receiver * r, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class Receiver,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;Emitter&gt; const &amp; e, Receiver * r, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class Receiver,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;Emitter&gt; const &amp; e, Receiver * r, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class Receiver,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( Emitter * e, weak_ptr&lt;Receiver&gt; const &amp; r, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class Receiver,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;Emitter&gt; const &amp; e, weak_ptr&lt;Receiver&gt; const &amp; r, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class Receiver,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;Emitter&gt; const &amp; e, weak_ptr&lt;Receiver&gt; const &amp; r, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class Receiver,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( Emitter * e, shared_ptr&lt;Receiver&gt; const &amp; r, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class Receiver,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;Emitter&gt; const &amp; e, shared_ptr&lt;Receiver&gt; const &amp; r, F f );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class Emitter,class Receiver,class F&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;Emitter&gt; const &amp; e, shared_ptr&lt;Receiver&gt; const &amp; r, F f );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@void (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( thread_local_queue &amp; q, function&lt;void()&gt; const &amp; f );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>19</size>
												<variant>2</variant>
												<string>[@template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:), class Emitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;Emitter&gt; const &amp; e );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:), class Emitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;Emitter&gt; const &amp; e );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:), class Emitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( Emitter * e );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt;&#10;shared_ptr&lt;T&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)() const;@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@int (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( thread_local_queue &amp; q );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>73</size>
												<variant>2</variant>
												<string>[@template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter,class TranslatedEmitter&gt;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( OriginalEmitter * original_emitter, TranslatedEmitter * translated_emitter );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter,class TranslatedEmitter&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( OriginalEmitter * original_emitter, weak_ptr&lt;TranslatedEmitter&gt; const &amp; translated_emitter );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter,class TranslatedEmitter&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( OriginalEmitter * original_emitter, shared_ptr&lt;TranslatedEmitter&gt; const &amp; translated_emitter );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter,class TranslatedEmitter&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;OriginalEmitter&gt; const &amp; original_emitter, TranslatedEmitter * translated_emitter );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter,class TranslatedEmitter&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;OriginalEmitter&gt; const &amp; original_emitter, weak_ptr&lt;TranslatedEmitter&gt; const &amp; translated_emitter );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter,class TranslatedEmitter&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( weak_ptr&lt;OriginalEmitter&gt; const &amp; original_emitter, shared_ptr&lt;TranslatedEmitter&gt; const &amp; translated_emitter );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter,class TranslatedEmitter&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;OriginalEmitter&gt; const &amp; original_emitter, TranslatedEmitter * translated_emitter );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter,class TranslatedEmitter&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;OriginalEmitter&gt; const &amp; original_emitter, weak_ptr&lt;TranslatedEmitter&gt; const &amp; translated_emitter );&#10;&#10;template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|OriginalSignal:),class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|TranslatedSignal:),class OriginalEmitter,class TranslatedEmitter&gt;&#10;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( shared_ptr&lt;OriginalEmitter&gt; const &amp; original_emitter, shared_ptr&lt;TranslatedEmitter&gt; const &amp; translated_emitter );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt; T * (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)() const; </string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@shared_ptr&lt;void const&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)();</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>[@--user-defined--@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@shared_ptr&lt;thread_local_queue&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)();@]</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt;&#10;shared_ptr&lt;T&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)() const;@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:);@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>13</size>
												<variant>2</variant>
												<string>[@shared_ptr&lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> const&gt; </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>( weak_ptr&lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> const&gt; const &amp; c );&#10;shared_ptr&lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>( weak_ptr&lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; const c &amp; );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt; void (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)( T const &amp; data ); </string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>[@template &lt;class (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:),class... A&gt;&#10;int (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( void const * e, A... a );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@int (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)( thread_local_queue &amp; q );@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-47</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-48</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>[@template &lt;class T&gt;&#10;shared_ptr&lt;T&gt; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-48</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)() const;@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>include</string>
								<shared_ptr>
									<id>53</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>45</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>13</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;The Qt Wiki contains the following example on creating custom signals and slots:&#10;&#10;-&gt;(:link https://wiki.qt.io/Qt_for_Beginners#Creating_custom_signals_and_slots|https://wiki.qt.io/Qt_for_Beginners#Creating_custom_signals_and_slots:)&#10;&#10;It requires running the Qt Meta Object Compiler.&#10;&#10;Below is the same example, modified to use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to implement the custom &apos;&apos;counterReached&apos;&apos; signal. This approach does not require running the Qt Meta Object Compiler.&#10;&#10;The changes made to the original program are marked with //&lt;--.&#10;&#10;[@#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;#define QT_NO_EMIT //Suppress the #define emit from Qt since it clashes with synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:).&#10;#include &lt;QtWidgets/QApplication&gt;&#10;#include &lt;QtWidgets/QPushButton&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;class Window : public QWidget&#10;{&#10;public:&#10;    explicit Window(QWidget *parent = 0);&#10;    signals: //&lt;-- Not needed with Synapse but okay&#10;    typedef struct counterReached_(*counterReached)(); //&lt;-- Was: void counterReached();&#10;private slots: //&lt;-- Not needed with Synapse but okay&#10;    void slotButtonClicked(bool checked);&#10;private:&#10;    int m_counter;&#10;    QPushButton *m_button;&#10;    boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c_; //&lt;-- Needed to keep the synapse connection afloat.&#10;};&#10;&#10;Window::Window(QWidget *parent) :&#10;    QWidget(parent)&#10;{&#10;     // Set size of the window&#10;     setFixedSize(100, 50);&#10;&#10;    // Create and position the button&#10;    m_button = new QPushButton(&quot;Hello World&quot;, this);&#10;    m_button-&gt;setGeometry(10, 10, 80, 30);&#10;    m_button-&gt;setCheckable(true);&#10;&#10;    // Set the counter to 0&#10;    m_counter = 0;&#10;&#10;    connect(m_button,&amp;QPushButton::clicked,&#10;        [this]( bool checked )&#10;        {&#10;            slotButtonClicked(checked);&#10;        } ); //&lt;-- Was: connect(m_button, SIGNAL (clicked(bool)), this, SLOT (slotButtonClicked(bool)));&#10;    c_=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;counterReached&gt;(this,&amp;QApplication::quit); //&lt;-- Was: connect(this, SIGNAL (counterReached()), QApplication::instance(), SLOT (quit()));&#10;}&#10;&#10;void Window::slotButtonClicked(bool checked)&#10;{&#10;    if (checked)&#10;        m_button-&gt;setText(&quot;Checked&quot;);&#10;    else&#10;        m_button-&gt;setText(&quot;Hello World&quot;);&#10;    m_counter ++;&#10;    if (m_counter == 10)&#10;        synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;counterReached&gt;(this); //&lt;-- Was: emit counterReached();&#10;}&#10;&#10;int main(int argc, char **argv)&#10;{&#10;    QApplication app (argc, argv);&#10;&#10;    Window window;&#10;    window.show();&#10;&#10;    return app.exec();&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>45</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;This example program demonstrates how to use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to bind a C-style callback API that uses function pointers. By using meta signals, such C-style callbacks can be connected directly through the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function. The program consists of several source files (also available for download on the main page):&#10;&#10;* &apos;&apos;callback_api.h/.c&apos;&apos; define an example 3rd-party API that uses C-style callbacks. It lets users set a single function pointer callback on objects of type &apos;&apos;api_handle&apos;&apos;. The callback is invoked with different values for the &apos;&apos;event&apos;&apos; argument to report on different events. In this case calling &apos;&apos;api_do_this&apos;&apos; generates &apos;&apos;API_EVENT_THIS&apos;&apos;, and calling &apos;&apos;api_do_that&apos;&apos; generates &apos;&apos;API_EVENT_THAT&apos;&apos;.&#10;* &apos;&apos;synapsify.hpp/.cpp&apos;&apos; contain the machinery needed to handle &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; meta signals. Once initialized, user calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;synapse_callback&gt;&apos;&apos; are forwarded automatically to &apos;&apos;api_set_callback&apos;&apos;/&apos;&apos;api_clear_callback&apos;&apos; (from &apos;&apos;callback_api.h&apos;&apos;) if needed.&#10;* Finally, &apos;&apos;main.cpp&apos;&apos; creates an &apos;&apos;api_handle&apos;&apos; object and then &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;s two different handlers that get called when the &apos;&apos;api_do_this&apos;&apos;/&apos;&apos;api_do_that&apos;&apos; is called.&#10;&#10;&apos;&apos;&apos;Program output:&apos;&apos;&apos;&#10;&#10;[@Detected synapse_callback connection on api_handle at 0x00000000004EE980 (first connection, calling api_set_callback)&#10;Detected synapse_callback connection on api_handle at 0x00000000004EE980&#10;handler1 called on api_handle object at 0x00000000004EE980, event=1&#10;handler2 called on api_handle object at 0x00000000004EE980, event=1&#10;handler1 called on api_handle object at 0x00000000004EE980, event=2&#10;handler2 called on api_handle object at 0x00000000004EE980, event=2&#10;Detected expiring synapse_callback connection on api_handle at 0x00000000004EE980&#10;Detected expiring synapse_callback connection on api_handle at 0x00000000004EE980 (last connection, calling api_clear_callback)@]&#10;&#10;&apos;&apos;&apos;callback_api.h:&apos;&apos;&apos;&#10;&#10;[@typedef struct api_handle api_handle;&#10;api_handle * api_create_object();&#10;void api_destroy_object( api_handle * );&#10;&#10;//The user_data pointer is typical in C-style callbacks APIs, so it&apos;s included&#10;//here even though this example has no use for it.&#10;typedef void (*api_callback_type)( api_handle *, void * user_data, int event );&#10;&#10;void api_set_callback( api_handle *, api_callback_type, void * user_data );&#10;void api_clear_callback( api_handle * );&#10;&#10;//When api_do_this is called, it calls the callback passing API_EVENT_THIS as&#10;//the event argument; api_do_that calls the callback with API_EVENT_THAT.&#10;#define API_EVENT_THIS 1&#10;#define API_EVENT_THAT 2&#10;void api_do_this( api_handle * );&#10;void api_do_that( api_handle * );@]&#10;&#10;&apos;&apos;&apos;callback_api.c:&apos;&apos;&apos;&#10;&#10;[@#include &quot;callback_api.h&quot;&#10;#include &lt;stdlib.h&gt;&#10;&#10;struct api_handle&#10;{&#10;    api_callback_type callback;&#10;    void * user_data;&#10;};&#10;&#10;api_handle * api_create_object()&#10;{&#10;    api_handle * p=(api_handle *)malloc(sizeof(api_handle));&#10;    p-&gt;callback=0;&#10;    return p;&#10;}&#10;&#10;void api_destroy_object( api_handle * p )&#10;{&#10;    free(p);&#10;}&#10;&#10;void api_set_callback( api_handle * p, api_callback_type c, void * user_data )&#10;{&#10;    p-&gt;callback=c;&#10;    p-&gt;user_data=user_data;&#10;}&#10;&#10;void api_clear_callback( api_handle * p )&#10;{&#10;    p-&gt;callback=0;&#10;}&#10;&#10;void api_do_this( api_handle * p )&#10;{&#10;    if( p-&gt;callback )&#10;        p-&gt;callback(p,p-&gt;user_data,API_EVENT_THIS);&#10;}&#10;&#10;void api_do_that( api_handle * p )&#10;{&#10;    if( p-&gt;callback )&#10;        p-&gt;callback(p,p-&gt;user_data,API_EVENT_THAT);&#10;}@]&#10;&#10;&apos;&apos;&apos;synapsify.hpp:&apos;&apos;&apos;&#10;&#10;[@extern &quot;C&quot;&#10;{&#10;    #include &quot;callback_api.h&quot;&#10;}&#10;&#10;//This is the Synapse (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) that corresponds to the callbacks received from the C-style callback API.&#10;typedef struct synapse_callback_(*synapse_callback)( api_handle *, int event );&#10;&#10;//Connect synapse::meta::connected&lt;synapse_callback&gt; and synapse::meta::disconnected&lt;synapse_callback&gt;&#10;//to set/clear the api_handle callbacks when synapse_callback signals are connected or disconnected.&#10;void synapsify();@]&#10;&#10;&apos;&apos;&apos;synapsify.cpp&apos;&apos;&apos;&#10;&#10;[@#include &quot;synapsify.hpp&quot;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;iostream&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;{&#10;    void emit_fwd( api_handle * h, void *, int v )&#10;    {&#10;        (void) synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse_callback&gt;(h,h,v);&#10;    }&#10;}&#10;&#10;void synapsify()&#10;{&#10;    (void) synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse_callback&gt; &gt;(synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>(),&#10;        [ ]( synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> &amp; c, unsigned flags )&#10;        {&#10;            boost::shared_ptr&lt;api_handle&gt; h=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;api_handle&gt;();&#10;            std::cout &lt;&lt; &quot;Detected synapse_callback &quot; &lt;&lt; ((flags&amp;synapse::meta::connect_flags::connecting)?&quot;&quot;:&quot;dis&quot;) &lt;&lt; &quot;connection on api_handle at 0x&quot; &lt;&lt; h.get();&#10;            if( flags&amp;synapse::meta::connect_flags::first_for_this_emitter )&#10;            {&#10;                assert(flags&amp;synapse::meta::connect_flags::connecting);&#10;                std::cout &lt;&lt; &quot; (first connection, calling api_set_callback)&quot;;&#10;                api_set_callback(h.get(),&amp;emit_fwd,0);&#10;            }&#10;            else if( flags&amp;synapse::meta::connect_flags::last_for_this_emitter )&#10;            {&#10;                assert(!(flags&amp;synapse::meta::connect_flags::connecting));&#10;                std::cout &lt;&lt; &quot; (last connection, calling api_clear_callback)&quot;;&#10;                api_clear_callback(h.get());&#10;            }&#10;            std::cout &lt;&lt; std::endl;&#10;        } );&#10;}@]&#10;&#10;&apos;&apos;&apos;main.cpp&apos;&apos;&apos;&#10;&#10;[@#include &quot;synapsify.hpp&quot;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;iostream&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;{&#10;    void handler1( api_handle * h, int event )&#10;    {&#10;        std::cout &lt;&lt; &quot;handler1 called on api_handle object at 0x&quot; &lt;&lt; h &lt;&lt; &quot;, event=&quot; &lt;&lt; event &lt;&lt; std::endl;&#10;    }&#10;    void handler2( api_handle * h, int event )&#10;    {&#10;        std::cout &lt;&lt; &quot;handler2 called on api_handle object at 0x&quot; &lt;&lt; h &lt;&lt; &quot;, event=&quot; &lt;&lt; event &lt;&lt; std::endl;&#10;    }&#10;}&#10;&#10;int main()&#10;{&#10;    //Connect the meta signal handlers to deal with  api_set_callback and api_clear_callback&#10;    //automatically -- see callback_api.h and synapsify.cpp.&#10;    synapsify();&#10;&#10;    //Use shared_ptr with a custom deleter to hold an api_handle object.&#10;    boost::shared_ptr&lt;api_handle&gt; h(api_create_object(),&amp;api_destroy_object);&#10;&#10;    {&#10;        //The meta signal handlers deal with api_set_callback and api_clear_callback as needed,&#10;        //so now we can use Synapse to connect to the C-style API callbacks. Note that we can&#10;        //create many connections even though the C-style API supports only a single callback&#10;        //per api_handle object.&#10;        boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; c1 = </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>(synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse_callback&gt;(h,&amp;handler1));&#10;        boost::shared_ptr&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt; c2 = </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>(synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse_callback&gt;(h,&amp;handler2));&#10;&#10;        //This invokes handler1 and handler2, in that order, passing API_EVENT_THIS.&#10;        api_do_this(h.get());&#10;&#10;        //This invokes handler1 and handler2, in that order, passing API_EVENT_THAT.&#10;        api_do_that(h.get());&#10;    }&#10;&#10;    //At this point all synapse_callback connections have expired and the meta handlers have&#10;    //cleared the callback on the api_handle object, so the calls below do not invoke any handlers.&#10;    api_do_this(h.get());&#10;    api_do_that(h.get());&#10;&#10;    return 0;&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>21</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;Connection objects are created by the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; and &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; functions and are passed to handlers of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; signal, which can use the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&apos;&apos; and &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; member function templates to access the emitter or receiver object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;/&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, and the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;/&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; member function templates to store auxiliary information in the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;function&quot; except_tags=&quot;noindex&quot; fmt=&quot;index&quot;:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>37</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;Connects the specified &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from the emitter &apos;&apos;e&apos;&apos; to the (compatible) function object &apos;&apos;f&apos;&apos; and then emits &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; &apos;&apos;from the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. Handlers of the meta signal take a reference to the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object, and a second argument &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|flags:)&apos;&apos; which indicates whether the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object is beeing created or destroyed.&#10;&#10;When using an overload which returns &apos;&apos;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos;, the connection is severed when the returned object expires; it is the responsibility of the caller to ensure that the emitter object &apos;&apos;e&apos;&apos; (and the optional receiver &apos;&apos;r&apos;&apos;) remain valid as long as the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; exists.&#10;&#10;In overloads which return &apos;&apos;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos;, at least one of &apos;&apos;e&apos;&apos; and &apos;&apos;r&apos;&apos; is either &apos;&apos;weak_ptr&apos;&apos; or &apos;&apos;shared_ptr&apos;&apos;, and the connection exists until either &apos;&apos;e&apos;&apos; or &apos;&apos;r&apos;&apos; (if specified) expire, regardless of whether or not the user locks the returned &apos;&apos;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos; object. It is possible to disconnect earlier by passing the returned &apos;&apos;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos; to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;; in that case the connection is severed when the &apos;&apos;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos; object returned by &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; expires.&#10;&#10;!!!!Notes:&#10;&#10;* The returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object does not assume ownership of &apos;&apos;e&apos;&apos;: passing &apos;&apos;e&apos;&apos; as a &apos;&apos;shared_ptr&apos;&apos; is equivalent to passing a &apos;&apos;weak_ptr&apos;&apos;;&#10;* Use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to access &apos;&apos;e&apos;&apos; at a later time.&#10;* Use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to access &apos;&apos;r&apos;&apos; at a later time. </string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>9</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;Queues &apos;&apos;f&apos;&apos; to be called next time &apos;&apos;q&apos;&apos; is &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|polled:)&apos;&apos;; that is, &apos;&apos;f&apos;&apos; will be executed synchronously in the thread that has created &apos;&apos;q&apos;&apos;.&#10;&#10;!!!!Note:&#10;&#10;While &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;) must be called from the thread that created the &apos;&apos;thread_local_queue&apos;&apos; object, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; may be called from any thread. &#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;example&quot; except_tags=&quot;noindex&quot;:)</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>15</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;This template defines a signal that is emitted by the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; when the specified &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is blocked by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. The emitter object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; can be accessed by handlers of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; through &apos;&apos;eb&apos;&apos;. Users can connect this meta signal to reflect the blocking of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; in other systems. For example &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot; automatically disables or enables a button whenever its signal is blocked or unblocked.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>49</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;Blocks the specified &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from the emitter &apos;&apos;e&apos;&apos; until the returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object expires. While the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is blocked, calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;Signal&gt;&apos;&apos; for &apos;&apos;e&apos;&apos; are ignored and return 0.&#10;&#10;!!!!Warning:&#10;&#10;If &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is passed a raw pointer, deleting the emitter before the returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object has expired results in undefined behavior.&#10;&#10;!!!!Notes:&#10;&#10;* Blocking affects existing as well as future connections.&#10;* If the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; was &apos;&apos;&apos;not&apos;&apos;&apos; blocked for &apos;&apos;e&apos;&apos; at the time &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is called, it emits &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos; from the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, passing &apos;&apos;true&apos;&apos; for the &apos;&apos;is_blocked&apos;&apos; argument;&#10;* When the returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object expires, if there are no other &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; objects blocking the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from the same emitter &apos;&apos;e&apos;&apos;, the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos; is again emitted from the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; with &apos;&apos;false&apos;&apos; passed for the &apos;&apos;is_blocked&apos;&apos; argument;&#10;* The &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object is passed to handlers of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos;. They can use it to access the emitter &apos;&apos;e&apos;&apos; or the receiver &apos;&apos;r&apos;&apos; passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;;&#10;* The returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object does not own &apos;&apos;e&apos;&apos; even if the &apos;&apos;shared_ptr&apos;&apos; &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; overload is used.&#10;&#10;!!!!Example:&#10;&#10;See &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>19</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;A &apos;&apos;shared_ptr&apos;&apos; that points the emitter that was passed to an overload of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) function template which created the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object.&#10;&#10;!!!!Notes:&#10;&#10;* An empty &apos;&apos;shared_ptr&apos;&apos; is returned if:&#10;** &apos;&apos;T&apos;&apos; does not match the static type of the emitter passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;), or&#10;** the emitter was passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) as a &apos;&apos;shared/weak_ptr&apos;&apos; and it has expired.&#10;* If the emitter was passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) as a raw pointer, the returned &apos;&apos;shared_ptr&apos;&apos; points that emitter but does not (can not) keep it afloat.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;Synchronously emits all signals queued asynchronously into &apos;&apos;q&apos;&apos; by calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from other threads. See (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:).&#10;&#10;!!!!Returns:&#10;&#10;The total number of signals emitted.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;signal&quot; except_tags=&quot;noindex&quot; fmt=&quot;index&quot; sort_prefix=&quot;6&quot;:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>11</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;This function can be used to translate one signal into another signal, as long as their arguments are compatible. The connection lifetime is managed similarly to the rules that apply to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;. &#10;&#10;!!!!Example:&#10;&#10;If we have the following signals:&#10;&#10;[@typedef struct button_on_click_(*button_on_click)();&#10;typedef struct dialog_confirmed_(*dialog_confirmed)();@]&#10;&#10; we could use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_on_click,dialog_confirmed&gt;(btn,dlg)&apos;&apos; to cause the dialog &apos;&apos;dlg&apos;&apos; to get &quot;confirmed&quot; when the button &apos;&apos;btn&apos;&apos; is clicked.&#10;&#10;!!!!Note:&#10;&#10;The returned connection itself does not count towards the return value of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;OriginalSignal&gt;&apos;&apos;; that is, the return value of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;OriginalSignal&gt;&apos;&apos; is as if &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;TranslatedSignal&gt;&apos;&apos; was called instead. </string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>9</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;If &apos;&apos;this&apos;&apos; contains object of type &apos;&apos;T&apos;&apos; previously copied by a call to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;, returns a pointer to the copy.&#10;&#10;If &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; has not been called for &apos;&apos;this&apos;&apos;, or if the type used to instantiate the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; function template doesn&apos;t match the type used with &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;, returns 0.</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>9</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;This function returns the meta emitter. Connecting (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;p&quot;:) from this emitter allows user code to take action when a particular signal is (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|connected/disconnected:) or (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|blocked/unblocked:). &#10;&#10;!!!!Note:&#10;&#10;The meta emitter is a singleton. It is created the first time &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is called.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;In &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; different signals are identified by different user-defined pointer-to-function types. The return type of such signal typedefs is used to identify the signal. This is possible because the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; interface ignores the return value of any connected function object.&#10;&#10;For example, the following typedef defines a &apos;&apos;mouse_move&apos;&apos; signal that takes two integers. The &apos;&apos;mouse_move_&apos;&apos; struct is not a &quot;real&quot; type: its only purpose is to identify the signal and so it&apos;s declared inline and left incomplete:&#10;&#10;[@typedef struct mouse_move_(*mouse_move)( int x, int y );@]&#10;&#10;Of course the typedef itself—in this case &apos;&apos;mouse_move&apos;&apos;, not &apos;&apos;mouse_move_&apos;&apos;—is used to refer to the defined signal.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>5</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;A thread-local object that can be used to queue signals emitted asynchronously from other threads. Use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to emit the queued signals sinchronously into the calling thread. See (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:).&#10;&#10;!!!!Note:&#10;&#10;While any number of threads can use this function to create their own &apos;&apos;thread_local_queue&apos;&apos;, it is invalid to create more than one &apos;&apos;thread_local_queue&apos;&apos; object per thread.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>17</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; has been formatted for submission for a Boost review, so its directory structure follows the common directory structure for Boost libraries—and it&apos;s built with Boost Build.&#10;&#10;Alternatively, just put &apos;&apos;connect.cpp&apos;&apos; and either &apos;&apos;thread_local_queue.cpp&apos;&apos; or &apos;&apos;interthread_stub.cpp&apos;&apos; into your favorite build system, depending on whether or not your program calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. In addition if your program calls the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function, you also need to compile and link &apos;&apos;block.cpp&apos;&apos;.&#10;&#10;However, note that if your program only emits signals (that is, it calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; but it never creates any &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;p&quot;:)&apos;&apos;), there is no need to link any &apos;&apos;.cpp&apos;&apos; files; that is, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; by itself is an independent header-only library. This way libraries that emit signals do not require the user to link &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, unless he cares to connect them.&#10;&#10;!!!Portability&#10;&#10;Currently &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; requires compiler support for the following C++11 features:&#10;&#10;* Thread-safe dynamic initialization of local static objects;&#10;* thread_local objects;&#10;* lambda functions&#10;* &lt;thread&gt;&#10;* &lt;atomic&gt;&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>11</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;This program demonstrates how Boost Synapse can be used to dispatch &apos;&apos;WindowProc&apos;&apos; messages using the &apos;&apos;HWND&apos;&apos; object as the emitter argument to &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. It also shows how &apos;&apos;boost::shared_ptr&apos;&apos; can be used to control the lifetime of Windows objects.&#10;&#10;The difficulty in implementing this example without Boost Synapse is in the fact that it is not trivial to associate arbitrary state with a &apos;&apos;HWND&apos;&apos; object, making it difficult to send messages to a C++ lambda function, as this example does.&#10;&#10;[@#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#define NOMINMAX&#10;#include &lt;windows.h&gt;&#10;#include &lt;sstream&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;{&#10;    //Define a mouse_move signal that takes the mouse cursor coordinates.&#10;    typedef struct mouse_move_(*mouse_move)( int x, int y );&#10;&#10;    //Windows handles are pointer typedefs. The code below extracts the pointer type&#10;    //from the typedef so that it can be used with shared_ptr. This technique works for&#10;    //all Windows handle types.&#10;    template &lt;class T&gt; struct h_type;&#10;    template &lt;class T&gt; struct h_type&lt;T *&gt; { typedef T type; };&#10;    typedef h_type&lt;HWND&gt;::type hwnd_t;&#10;&#10;    //This is our WindowProc registered with Windows. Its translates Windows messages&#10;    //into calls to synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;&gt;, passing the hWnd as the emitter object.&#10;    LRESULT CALLBACK WindowProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )&#10;    {&#10;        switch( uMsg )&#10;        {&#10;        default:&#10;            return DefWindowProc(hWnd,uMsg,wParam,lParam);&#10;        case WM_MOUSEMOVE:&#10;            synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;mouse_move&gt;(hWnd,lParam&amp;0xFFFF,(lParam&gt;&gt;16)&amp;0xFFFF);&#10;            break;&#10;        case WM_CLOSE:&#10;            PostQuitMessage(0);&#10;            break;&#10;        }&#10;        return 0;&#10;    }&#10;&#10;    //This function is connected to the mouse_move signal emitted by WindowProc.&#10;    void print_mouse_position( HWND hWnd, int x, int y )&#10;    {&#10;        if( HDC dc=GetDC(hWnd) )&#10;        {&#10;            std::ostringstream str; str &lt;&lt; &quot;Mouse position: &quot; &lt;&lt; x &lt;&lt; &quot;, &quot; &lt;&lt; y;&#10;            std::string s=str.str();&#10;            RECT rect; GetClientRect(hWnd,&amp;rect);&#10;            FillRect(dc,&amp;rect,(HBRUSH) GetStockObject(WHITE_BRUSH));&#10;            TextOutA(dc,10,10,s.c_str(),s.size());&#10;            ReleaseDC(hWnd,dc);&#10;        }&#10;    }&#10;}&#10;&#10;int CALLBACK WinMain( HINSTANCE hInstance, HINSTANCE, LPSTR, int )&#10;{&#10;    //Register the Windows class.&#10;    char const name[ ]=&quot;win_WindowProc&quot;;&#10;    WNDCLASSEXA wcx; &#10;    wcx.cbSize = sizeof(wcx);&#10;    wcx.style = CS_HREDRAW|CS_VREDRAW|CS_DBLCLKS;&#10;    wcx.lpfnWndProc = &amp;WindowProc;&#10;    wcx.cbClsExtra = 0;&#10;    wcx.cbWndExtra = 0;&#10;    wcx.hInstance = hInstance;&#10;    wcx.hIcon = 0;&#10;    wcx.hCursor=LoadCursor(NULL,IDC_ARROW);&#10;    wcx.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH);&#10;    wcx.lpszMenuName =  0; &#10;    wcx.lpszClassName = name;&#10;    wcx.hIconSm = 0;&#10;    (void) RegisterClassExA(&amp;wcx);&#10;&#10;    //Create a window and hold on to it by shared_ptr.&#10;    boost::shared_ptr&lt;hwnd_t&gt; hWnd;&#10;    if( HWND w=CreateWindowA(name,name,WS_OVERLAPPED|WS_CAPTION|WS_SYSMENU|WS_SIZEBOX,200,200,400,200,0,0,hInstance,0) )&#10;        boost::shared_ptr&lt;hwnd_t&gt;(w,&amp;DestroyWindow).swap(hWnd);&#10;    else&#10;        return 1; //Error&#10;&#10;    //Connect the mouse_move signal from the hWnd emitter to the print_mouse_position function.&#10;    synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;mouse_move&gt;(hWnd,&#10;        [&amp;hWnd]( int x, int y )&#10;        {&#10;            print_mouse_position(hWnd.get(),x,y);&#10;        } );&#10;&#10;    //Show the window and call print_mouse_position once so it&apos;s not empty to begin with.&#10;    ShowWindow(hWnd.get(),SW_SHOW);&#10;    print_mouse_position(hWnd.get(),0,0);&#10;&#10;    //Process messages -- this continues until the user closes the window.&#10;    for( MSG msg; GetMessageA(&amp;msg,0,0,0); )&#10;    {&#10;        TranslateMessage(&amp;msg);&#10;        DispatchMessage(&amp;msg);&#10;    }&#10;    return 0;&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>27</size>
												<variant>2</variant>
												<string>!!!Abstract&#10;&#10;(Note: Synapse is not part of (:link http://www.boost.org|Boost:). Please post questions and suggestions on the (:link http://www.boost.org/community/groups.html#main|Boost Developers Mailing List:)).&#10;&#10;&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is a C++ (:link http://en.wikipedia.org/wiki/Signal_programming|signal programming:) library. It can be used to define communication channels between many different entities in a dynamic object environment. Sometimes such libraries are part of a larger API, but independent alternatives like (:link http://www.boost.org/doc/libs/release/doc/html/signals2.html|Boost Signals 2:) or (:link http://libsigc.sourceforge.net|libsigc++:) are available as well.&#10;&#10;The advantage of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; over other similar libraries is that it is non-intrusive: it allows any object of any type whatsoever to be used as a signal emitter.&#10;&#10;!!!Contents&#10;&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-47</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&#10;&#10;!!!Examples&#10;&#10;(:pagelist tags=&quot;example&quot; except_tags=&quot;noindex&quot;:)&#10;!!!Multi-threading support&#10;&#10;Most of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; functionality is implemented using thread-local data structures, so by default signals are propagated independently within each user thread. In addition, thread-local queues can be created in any thread, to synchronously receive queued signals emitted asynchronously by other threads; see (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:).&#10;&#10;!!!Comparison with Boost.Signals2&#10;&#10;If you&apos;re familiar with &apos;&apos;Boost.Signals2&apos;&apos; and want to understand how &apos;&apos;Synapse&apos;&apos; is different, to read about the design tradeoffs in each library, or to learn about &apos;&apos;Synapse&apos;&apos;&apos;s special features (e.g. meta signals), see (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:).&#10;&#10;!!!Download&#10;&#10;See (:link https://github.com/zajo/boost-synapse|this:) github repo.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>37</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; can be used to implement interthread communication using (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;p&quot;:). The data structures created by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) use thread-local storage, so by default calling &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; will call only functions connected by the calling thread (and will not return until all such functions have been called in order, or one of them throws.)&#10;&#10;The following diagram shows the connections created (by calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;S&gt;&apos;&apos;) in a single thread for a given signal type &apos;&apos;S&apos;&apos;, each connecting an emitter to a function. When &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;S&gt;(e1,arg,...)&apos;&apos; is called, all functions connected (for &apos;&apos;S&apos;&apos;) to the given emitter &apos;&apos;e1&apos;&apos; are called (in the order in which the connections were created):&#10;&#10;[@replace replace@]&#10;&#10;However, it is also possible for any thread to request to receive all signals emitted by other threads, by creating its own &apos;&apos;thread_local_queue&apos;&apos; object using &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;&#10;In this case, &apos;&apos;&apos;in addition&apos;&apos;&apos; to the behavior described above, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;S&gt;(e1,arg,...)&apos;&apos; will capture its arguments (depending on the signature of &apos;&apos;S&apos;&apos;) and queue them into the &apos;&apos;thread_local_queue&apos;&apos; object created by any thread &apos;&apos;&apos;other&apos;&apos;&apos; than the calling thread. Each such thread must &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; its own &apos;&apos;thread_local_queue&apos;&apos; regularly; this &quot;emits&quot; the queued objects locally and removes them from the queue (note that &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is not given an emitter or a signal type, it emits locally all queued objects, regardless of signal type or emitter).&#10;&#10;This is illustrated by the following diagram:&#10;&#10;[@replace replace@]&#10;&#10;A typical use case for this system is to update user interface objects with data generated by one or multiple worker threads. This way, the user interface objects themselves need not be thread-safe, because they will be updated only synchronously, at the time &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is called.&#10;&#10;!!!!Warning:&#10;&#10;Special care must be taken to ensure that any objects referred to by arguments passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; will remain valid until the time any other threads &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; their &apos;&apos;thread_local_queues&apos;&apos;. For example, the following code is incorrect in the presence of &apos;&apos;thread_local_queues&apos;&apos;:&#10;&#10;[@typedef struct my_signal_(*my_signal)( int * );&#10;&#10;void emit_my_signal( int x )&#10;{&#10;    (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;my_signal&gt;(&amp;x); //Undefined behavior in the presence of thread_local_queues!&#10;}@]&#10;&#10;The problem is that the address of &apos;&apos;x&apos;&apos; may be queued into other threads&apos; queues, and since &apos;&apos;x&apos;&apos; is local to &apos;&apos;emit_my_signal&apos;&apos;, it may be destroyed by the time these threads call &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;&#10;!!!Using &apos;&apos;thread_local_queue&apos;&apos; objects to asynchronously schedule synchronous function execution&#10;&#10;The &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function can be used to queue into a &apos;&apos;thread_local_queue&apos;&apos; arbitrary functions for execution at the time &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is called to emit queued signals. This feature allows critical worker threads to minimize the amount of time they consume by offloading expensive non-critical computations to another, non-critical thread. This also removes the need for synchronization, since the queued functions are executed synchronously in the thread that owns the &apos;&apos;thread_local_queue&apos;&apos; object.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>25</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;&apos;&apos;&apos;Q:&apos;&apos;&apos; How does &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; differ from &apos;&apos;(:link http://www.boost.org/doc/libs/release/doc/html/signals2.html|Boost Signals 2:)&apos;&apos;?&#10;&#10;-&gt;&apos;&apos;&apos;A:&apos;&apos;&apos; The main design difference is that in &apos;&apos;(:link http://www.boost.org/doc/libs/release/doc/html/signals2.html|Boost Signals 2:)&apos;&apos; emitting a signal requires a signal object. This is significant because in general it is not trivial to associate a &apos;&apos;(:link http://www.boost.org/doc/libs/release/doc/html/signals2.html|Boost Signals 2:)&apos;&apos; signal object with 3rd-party objects. When using &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; such association is not necessary because the 3rd-party object itself can be passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;&#10;&apos;&apos;&apos;Q:&apos;&apos;&apos; What is the design rationale for ignoring the value(s) returned by the connected functions?&#10;&#10;-&gt;&apos;&apos;&apos;A:&apos;&apos;&apos; A typical use case for &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is when the caller of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; doesn&apos;t care if there are 0, 1 or many connected functions. Allowing return values makes the zero/many case quite tricky to deal with. On the other hand, passing a reference or a (shared) pointer to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to return/accumulate values from any number of connected functions (if needed) can be implemented in a simple lambda function and fits that case nicely.&#10;&#10;&apos;&apos;&apos;Q:&apos;&apos;&apos; Is there a way to stop the emit loop before all connected functions have been called?&#10;&#10;-&gt;&apos;&apos;&apos;A:&apos;&apos;&apos; No, except by throwing an exception.&#10;&#10;&apos;&apos;&apos;Q:&apos;&apos;&apos; I am concerned about code size, does &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; use a lot of templates?&#10;&#10;-&gt;&apos;&apos;&apos;A:&apos;&apos;&apos; Yes, there are templates instantiated for each signal type. This is done so that the dispatch by signal type occurs at compile-time, leaving only emitter dispatch at run-time. However, static types are erased as soon as possible, so template bloat is kept to a minimum.&#10;&#10;&apos;&apos;&apos;Q:&apos;&apos;&apos; What are the dependencies of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;?&#10;&#10;-&gt;&apos;&apos;&apos;A:&apos;&apos;&apos; See &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;&#10;&apos;&apos;&apos;Q:&apos;&apos;&apos; I do not need thread-safety, is there a way to configure &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to eliminate thread safety overhead?&#10;&#10;-&gt;&apos;&apos;&apos;A:&apos;&apos;&apos; Most data structures in &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; are not thread-safe, instead they are thread-local. The overhead of using the library across multiple threads is contained only in &apos;&apos;thread_local_queue.cpp&apos;&apos;, which is an optional component. See &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>31</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;This program demonstrates how meta signals can be used to connect native Qt signals through the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; interface.&#10;&#10;When the user calls &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;&apos;&apos; passing a QPushButton, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;&apos;&apos; signal from the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. The &apos;&apos;handle_button_clicked_connected_meta_signal&apos;&apos; function responds to this meta signal by connecting (or disconnecting) the Qt-native &apos;&apos;QPushButton::clicked&apos;&apos; signal to the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;&apos;&apos; function.&#10;&#10;[@#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#include &lt;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&gt;&#10;#define QT_NO_EMIT //Suppress the #define emit from Qt since it clashes with synapse::emit.&#10;#include &lt;QtWidgets/QApplication&gt;&#10;#include &lt;QtWidgets/QDialog&gt;&#10;#include &lt;QtWidgets/QPushButton&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;//Define a Boost Synapse signal&#10;typedef struct button_clicked_(*button_clicked)();&#10;&#10;int main( int argc, char const * argv[ ] )&#10;{&#10;    //Connect the QPushButton::clicked Qt signal to synapse::emit&lt;button_clicked&gt;.&#10;    //Store the QMetaObject::Connection object into the synapse::connection object.&#10;    synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt; &gt;(&#10;        synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>(),&#10;        [ ]( synapse::connection &amp; c,unsigned flags )&#10;        {&#10;            if(flags&amp;synapse::meta::connect_flags::connecting)&#10;            {&#10;                QPushButton * pb=c.emitter&lt;QPushButton&gt;().get();&#10;                c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)(QObject::connect(pb,&amp;QPushButton::clicked,[pb]() { synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt;(pb); }));&#10;            }&#10;            else&#10;                QObject::disconnect(*c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QMetaObject::Connection&gt;());&#10;        } );&#10;&#10;    QApplication app(argc,(char * *)argv);&#10;    QDialog qd;&#10;    qd.setGeometry(QRect(QPoint(200,200),QSize(300,100)));&#10;    boost::shared_ptr&lt;QPushButton&gt; pb = boost::make_shared&lt;QPushButton&gt;(&quot;OK&quot;,&amp;qd);&#10;&#10;    //accept() the QDialog when pb is clicked.&#10;    synapse::</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&lt;button_clicked&gt;( pb, [&amp;qd]() { qd.accept(); } );&#10;&#10;    qd.exec();&#10;    return 0;&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>21</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;A &apos;&apos;shared_ptr&apos;&apos; that points the receiver that was passed to an overload of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) function template which created the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object.&#10;&#10;!!!!Notes:&#10;&#10;* An empty &apos;&apos;shared_ptr&apos;&apos; is returned if:&#10;** No receiver was passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;, or&#10;** &apos;&apos;T&apos;&apos; does not match the static type of the receiver passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;), or&#10;** the receiver was passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) as a &apos;&apos;shared/weak_ptr&apos;&apos; and it has expired.&#10;* If the receiver was passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; (or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) as a raw pointer, the returned &apos;&apos;shared_ptr&apos;&apos; points that receiver but does not (can not) keep it afloat.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>13</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;The &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function returns &apos;&apos;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) const&gt;&apos;&apos; that is used to control time the signal remains blocked. As well, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; objects are passed to handlers of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; signal, which can use the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-48</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&apos;&apos; member function template to access the emitter object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>21</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;This program demonstrates how to use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to build a simple logging system. Logging is done by emitting &apos;&apos;log_message&apos;&apos; (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|signals:) from different emitters based on the log message&apos;s severity.&#10;&#10;It consists of the following source files:&#10;&#10;* &apos;&apos;logger.h/logger.cpp&apos;&apos;: these files implement the logging interface;&#10;* &apos;&apos;main.cpp&apos;&apos;: a simple program using the interface defined in &apos;&apos;logger.h&apos;&apos;.&#10;&#10;The appeal of using Boost Synapse as a logging system engine is in that low level systems can use &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; to log messages without imposing overhead or a link dependency when linked in programs that do not care to connect the logging signals.&#10;&#10;&apos;&apos;&apos;Program output:&apos;&apos;&apos;&#10;&#10;[@Message 1, Severity 0&#10;Message 2, Severity 100&#10;Message 2, Severity 100&#10;Message 3, Severity 2&#10;Message 3, Severity 2@]&#10;&#10;&apos;&apos;&apos;logger.h:&apos;&apos;&apos;&#10;&#10;[@namespace boost { template &lt;class&gt; class shared_ptr; }&#10;&#10;#include &lt;stdio.h&gt;&#10;&#10;struct logger;&#10;&#10;//Create a logger object that can discriminate between messages based on severity up to the&#10;//specified maximum. Messages with higher max_severity are assumed to be of max_severity.&#10;boost::shared_ptr&lt;logger&gt; init_logger( int max_severity );&#10;&#10;//Add a target for logging messages with at least the specified severity.&#10;void add_log_target( logger &amp;, boost::shared_ptr&lt;FILE&gt; const &amp;, int min_severity );&#10;&#10;//Get a Boost Synapse emitter based on the message&apos;s severity.&#10;void const * severity( int severity );&#10;&#10;//Emit this Boost Synapse signal to log a message.&#10;typedef struct log_message_(*log_message)( char const * );@]&#10;&#10;&apos;&apos;&apos;logger.cpp:&apos;&apos;&apos;&#10;&#10;[@#include &quot;logger.h&quot;&#10;#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;#include &lt;vector&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;{&#10;    //Emitters, indexed by severity.&#10;    std::vector&lt;boost::weak_ptr&lt;void const&gt; &gt; emitters_;&#10;&#10;    void log_string( boost::shared_ptr&lt;FILE&gt; const &amp; f, char const * str )&#10;    {&#10;        assert(f);&#10;        assert(str!=0);&#10;        (void) fprintf(f.get(),&quot;%s&quot;,str);&#10;    }&#10;&#10;    boost::weak_ptr&lt;void const&gt; const &amp; severity_( int s )&#10;    {&#10;        assert(s&gt;=0);&#10;        assert(!emitters_.empty());&#10;        return s&gt;=emitters_.size()? emitters_.back() : emitters_[s];&#10;    }&#10;}&#10;&#10;struct logger&#10;{&#10;    private:&#10;    logger( logger const &amp; );&#10;    logger &amp; operator=( logger const &amp; );&#10;    public:&#10;    explicit logger( int max_severity )&#10;    {&#10;        std::vector&lt;boost::weak_ptr&lt;void const&gt; &gt;(max_severity).swap(emitters_);&#10;    }&#10;};&#10;&#10;boost::shared_ptr&lt;logger&gt; init_logger( int max_severity )&#10;{&#10;    assert(max_severity&gt;0);&#10;    boost::shared_ptr&lt;logger&gt; l(new logger(max_severity));&#10;&#10;    //Populate the static emitters vector: each emitter is a weak_ptr initialized from a shared_ptr alias&#10;    //of the logger object, but with a unique address.&#10;    for( int i=0; i!=max_severity; ++i )&#10;        emitters_[i]=boost::shared_ptr&lt;void const&gt;(l,&amp;emitters_[i]);&#10;&#10;    //Translate signals from higher severity emitters to lower severity emitters. This way a high severity&#10;    //message will automatically trickle down to lower severity emitters. With this approach it is possible&#10;    //to build a more complex translation DAG if needed.&#10;    for( int i=0; i!=max_severity-1; ++i )&#10;        (void) synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;log_message,log_message&gt;(emitters_[i+1],emitters_[i]);&#10;&#10;    return l;&#10;}&#10;&#10;void add_log_target( logger &amp; l, boost::shared_ptr&lt;FILE&gt; const &amp; target, int min_severity )&#10;{&#10;    assert(target);&#10;    assert(min_severity&gt;=0);&#10;    assert(min_severity&lt;emitters_.size());&#10;&#10;    //Connect the appropriate emitter based on severity. Since signals from higher severity emitters are&#10;    //translated to lower severities, the target will only get the messages with severity &gt;= min_severity.&#10;    (void) synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;log_message&gt;(severity_(min_severity),&#10;        [target]( char const * str )&#10;        {&#10;            log_string(target,str);&#10;        } );&#10;}&#10;&#10;void const * severity( int s )&#10;{&#10;    assert(s&gt;=0);&#10;    assert(!emitters_.empty());&#10;    return (s&gt;=emitters_.size()? emitters_.back() : emitters_[s]).lock().get();&#10;}@]&#10;&#10;&apos;&apos;&apos;main.cpp:&apos;&apos;&apos;&#10;&#10;[@#include &quot;logger.h&quot;&#10;#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;void do_some_logging()&#10;{&#10;    synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;log_message&gt;(severity(0),&quot;Message 1, Severity 0\n&quot;);&#10;    synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;log_message&gt;(severity(100),&quot;Message 2, Severity 100\n&quot;);&#10;    synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;log_message&gt;(severity(2),&quot;Message 3, Severity 2\n&quot;);&#10;}&#10;&#10;int main()&#10;{&#10;    //Create a logger that can distinguish between up to 3 severity levels: 0, 1 and 2.&#10;    boost::shared_ptr&lt;logger&gt; const l=init_logger(3);&#10;&#10;    //Severity 0 and 1 go to stdout, severity 2 and above go to stdout and stderr.&#10;    add_log_target(*l,boost::shared_ptr&lt;FILE&gt;(stdout,[ ]( FILE * ) { }),0);&#10;    add_log_target(*l,boost::shared_ptr&lt;FILE&gt;(stderr,[ ]( FILE * ) { }),2);&#10;&#10;    do_some_logging();&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>63</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;In &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|signals:) can be disabled by calling the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function. When a &apos;&apos;Signal&apos;&apos; becomes blocked, the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;Signal&gt;&apos;&apos; meta signal. By connecting the meta signal we can take action whenever signals are blocked or unblocked.&#10;&#10;This program demonstrates how this can be used to automatically disable/enable buttons in response to the &apos;&apos;button_clicked&apos;&apos; signal being blocked/unblocked.&#10;&#10;[@#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;#define QT_NO_EMIT //Suppress the #define emit from Qt since it clashes with synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:).&#10;#include &lt;QtWidgets/QApplication&gt;&#10;#include &lt;QtWidgets/QDialog&gt;&#10;#include &lt;QtWidgets/QPushButton&gt;&#10;#include &lt;QtWidgets/QCheckBox&gt;&#10;#include &lt;QtWidgets/QBoxLayout&gt;&#10;&#10;namespace synapse=boost::synapse;&#10;&#10;namespace&#10;{&#10;    //Define a Boost Synapse signal&#10;    typedef struct button_clicked_(*button_clicked)();&#10;&#10;    //When the button_clicked is being connected, connect the QPushButton::clicked Qt signal to&#10;    //synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt; and store the resulting QMetaObject::Connection object&#10;    //into the synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) object. When disconnecting, disconnect the stored&#10;    //QMetaObject::Connection object.&#10;    boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; meta_conn=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt; &gt;(&#10;        synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)(),&#10;        [ ]( synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; c, unsigned flags )&#10;        {&#10;            if( flags&amp;synapse::meta::connect_flags::connecting )&#10;            {&#10;                QPushButton * pb=c.emitter&lt;QPushButton&gt;().get();&#10;                c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)( QObject::connect( pb, &amp;QPushButton::clicked, [pb]() { synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(pb); } ) );&#10;            }&#10;            else&#10;                QObject::disconnect(*c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QMetaObject::Connection&gt;());&#10;            } );&#10;&#10;    //Whenever the button_clicked signal is blocked, disable the button. Enable when unblocked.&#10;    boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; meta_block=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt; &gt;(&#10;        synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)(),&#10;        [ ]( synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; b, bool blocked )&#10;        {&#10;            b.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QPushButton&gt;()-&gt;setDisabled(blocked);&#10;        } );&#10;}&#10;&#10;int main( int argc, char const * argv[ ] )&#10;{&#10;    QApplication app(argc,(char * *)argv);&#10;&#10;    //Create a QDialog with a QPushButton and a check QCheckBox.&#10;    boost::shared_ptr&lt;QDialog&gt; qd(new QDialog);&#10;    qd-&gt;setGeometry(QRect(QPoint(200,200),QSize(300,100)));&#10;    QVBoxLayout * layout = new QVBoxLayout;&#10;    QPushButton * pb=new QPushButton(&quot;OK&quot;); layout-&gt;addWidget(pb);&#10;    QCheckBox * cb1=new QCheckBox(&quot;Disabler 1&quot;); layout-&gt;addWidget(cb1);&#10;    QCheckBox * cb2=new QCheckBox(&quot;Disabler 2&quot;); layout-&gt;addWidget(cb2);&#10;    qd-&gt;setLayout(layout);&#10;    pb-&gt;setMaximumWidth(100);&#10;&#10;    //Make a weak_ptr to the QPushButton using shared_ptr aliasing constructor.&#10;    boost::weak_ptr&lt;QPushButton&gt; pbw=boost::shared_ptr&lt;QPushButton&gt;(qd,pb);&#10;&#10;    //accept() the QDialog when pb is clicked.&#10;    boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(pbw,[qd]() { qd-&gt;accept(); } );&#10;&#10;    //Block/unblock the button_clicked Boost Synapse signal when either checkbox is toggled.&#10;    //This simulates two conditions which independently block the button_clicked signal.&#10;    //The lambda function connected to synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt; (see above)&#10;    //is called when transitioning from zero checkboxes being checked to a checkbox being&#10;    //checked, and when transitioning from at least one checkbox being checked to zero&#10;    //checkboxes being checked.&#10;    boost::shared_ptr&lt;synapse::blocker&gt; blk1;&#10;    boost::shared_ptr&lt;synapse::blocker&gt; blk2;&#10;    (void) QObject::connect(cb1,&amp;QCheckBox::stateChanged,&#10;        [&amp;blk1,pbw]( bool block )&#10;        {&#10;            if( block )&#10;                blk1=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(pbw);&#10;            else&#10;                blk1.reset();&#10;        } );&#10;    (void) QObject::connect(cb2,&amp;QCheckBox::stateChanged,&#10;        [&amp;blk2,pbw]( bool block )&#10;        {&#10;            if( block )&#10;                blk2=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(pbw);&#10;            else&#10;                blk2.reset();&#10;        } );&#10;&#10;    qd-&gt;exec();&#10;    return 0;&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>35</size>
												<variant>2</variant>
												<string>(:auto !!:)&#10;&#10;!!!Definition of terms&#10;&#10;Signal programming libraries use the following concepts:&#10;&#10;*&apos;&apos;emitters&apos;&apos;&#10;*&apos;&apos;signals&apos;&apos;&#10;*&apos;&apos;slots&apos;&apos;&#10;*&apos;&apos;connections&apos;&apos;&#10;&#10;As an example, consider a simple &quot;ok&quot; dialog box in any user interface system. When the button is clicked, we want the dialog box to be &quot;accepted&quot; (closed).&#10;&#10;To express this in terms of signal programming:&#10;&#10;*The button is the &apos;&apos;emitter&apos;&apos; object;&#10;*When the button is clicked, it emits a &quot;button_clicked&quot; &apos;&apos;signal&apos;&apos;;&#10;*The dialog box has a member function &quot;accept&quot;, which acts as a &apos;&apos;slot&apos;&apos;.&#10;&#10;If we connect the &quot;button_clicked&quot; &apos;&apos;signal&apos;&apos; of the button to the &quot;accept&quot; &apos;&apos;slot&apos;&apos; on the dialog box, as long as the &apos;&apos;connection&apos;&apos; exists, clicking the button will accept (close) the dialog box.&#10;&#10;Naturally, &apos;&apos;signals&apos;&apos; may carry additional information in the form of arguments, much like functions. So, to connect a &apos;&apos;signal&apos;&apos; to a &apos;&apos;slot&apos;&apos;, their signatures must match.&#10;&#10;Both &apos;&apos;Signals2&apos;&apos; and &apos;&apos;Synapse&apos;&apos; diverge (in their own way) from the classic paradigm described above.&#10;&#10;!!!Signals2&#10;&#10;In &apos;&apos;Signals2&apos;&apos;, signals are simply objects that are callable (in C++ terms). To connect a signal, we call the signal object&apos;s connect member function, passing the function we want to connect. To emit a signal, we simply &apos;&apos;call&apos;&apos; the signal object, which calls all connected functions (if any).&#10;&#10;Here is the above example in terms of &apos;&apos;Signals2&apos;&apos;:&#10;&#10;[@class button&#10;{&#10;  ....&#10;public:&#10;  signal&lt;void()&gt; button_clicked;&#10;};&#10;&#10;class dialog_box&#10;{&#10;  ....&#10;public:&#10;  void accept();&#10;};@]&#10;&#10;To connect:&#10;&#10;[@dialog_box d;&#10;button b;&#10;b.button_clicked.connect(bind(&amp;dialog_box::accept,&amp;d));@]&#10;&#10;To emit:&#10;&#10;[@b.button_clicked();@]&#10;&#10;Things to note:&#10;&#10;*Emitters are implicit: the emitter is simply the object which has the member signal objects;&#10;*Slots are simply functions, that is, they don&apos;t have to belong to an object;&#10;*The different semantics of different signals are expressed by the different names given to signal objects. How do we know the signal we&apos;re emitting or connecting is &quot;button_clicked&quot; (as opposed to another signal that has the same signature)? Because the signal object&apos;s name is &quot;button_clicked&quot;.&#10;*It is impossible to express that two emitters emit the same signal, except by using the same identifier for their respective signal objects. However, the &quot;sameness&quot; is not expressed in code, it lives only in the mind of the programmer.&#10;*Emitting a signal simply iterates the list of all connected functions maintained by each signal object.&#10;&#10;!!!Synapse&#10;&#10;In Synapse, emitters are explicit and signals are C++ types rather than objects. Signals are defined independently of any emitter. To connect a signal, we instantiate the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function template with the signal type we want to connect, passing the emitter object, (optionally) the receiver object, and the function we want connected. To emit a signal, we instantiate the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function template with the signal type, passing the emitter object, which calls all connected functions (if any).&#10;&#10;Here is our example in terms of &apos;&apos;Synapse&apos;&apos;:&#10;&#10;[@typedef struct button_clicked_(*button_clicked)();&#10;&#10;//Note: no Synapse definitions here, since it is non-intrusive.&#10;//Both button and dialog_box may be third-party types:&#10;class button&#10;{&#10;  ....&#10;};&#10;&#10;class dialog_box&#10;{&#10;  ....&#10;public:&#10;  void accept();&#10;};@]&#10;&#10;To connect:&#10;&#10;[@dialog_box d;&#10;button b;&#10;shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b,&amp;d,&amp;dialog_box::accept);@]&#10;&#10;To emit:&#10;&#10;[@(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b);@]&#10;&#10;Things to note:&#10;&#10;*Emitters are explicit: the call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; requires the user to pass an emitter object;&#10;*Slots are simply functions, that is, they don&apos;t have to belong to an object (same as in &apos;&apos;Signals2&apos;&apos;);&#10;*The different semantics of the different signals are expressed by the different return types used to define signal types (a signal can&apos;t return a value);&#10;*Signals are not coupled with the emitter in any way: different emitters may emit the same signal.&#10;*Emitting a signal searches all connections of the specified signal type (but not connections of any other signal type), calling the connected function if the address of the emitter stored in the connection object matches the address of the emitter passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;&#10;The most important differentiating feature of &apos;&apos;Synapse&apos;&apos; is that it is non-intrusive: emitting a signal does not require cooperation from the emitter object&apos;s type; that is, users can emit signals from any object whatsoever. For example, this is valid in &apos;&apos;Synapse&apos;&apos;:&#10;&#10;[@typedef struct my_signal_(*my_signal)();&#10;int x;&#10;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;my_signal&gt;(&amp;x);@]&#10;&#10;This allows two or more contexts under user control to communicate through any object (that acts as an emitter) shared between them, using different signals to communicate different messages.&#10;&#10;!!!Thread safety&#10;&#10;&apos;&apos;Signals2&apos;&apos; is thread-safe, meaning that it is safe to use a signal object from multilpe threads, however it provides nothing to facilitate thread safety in connected user functions. Its thread safety comes with the typical cost of using objects (in this case signal objects) shared between multiple threads.&#10;&#10;In contrast, &apos;&apos;Synapse&apos;&apos;&apos;s internal machinery uses &apos;&apos;thread_local&apos;&apos; storage, so creating or destroying connections doesn&apos;t need any locks. In addition, it provides (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:), where signals can be emitted asynchronously from any thread, but consumed synchronously from other threads. This is especially useful in the context of user interface systems: for example, worker threads may emit signals to update various user interface elements, but the actual update can occur synchronously in the main UI thread.&#10;&#10;!!!Meta signals&#10;&#10;In &apos;&apos;Synapse&apos;&apos;, connecting and disconnecting (also blocking and unblocking) signals emits signals from the special &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object. This allows users to translate between other signaling/notification/messaging APIs and &apos;&apos;Synapse&apos;&apos; signals. For example, when the user calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;S&gt;&apos;&apos;, the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits the signal &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;S&gt;&apos;&apos;. A function connected to that signal can then use a different library&apos;s API to forward its notifications to an appropriate call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;S&gt;&apos;&apos;; see &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&quot;.&#10;&#10;!!!Reduced physical coupling&#10;&#10;&apos;&apos;Synapse&apos;&apos; has the notable feature that the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function template is physically decoupled from the rest of the library. This means that a library that only emits (but never connects) signals needs not &apos;&apos;&apos;link&apos;&apos;&apos; &apos;&apos;Synapse&apos;&apos;.&#10;&#10;Similarly, if the user never calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from multiple threads and never creates &apos;&apos;thread_local_queue&apos;&apos; objects, &apos;&apos;Synapse&apos;&apos;&apos;s interthread communication components are never reached so there is no thread-safety overhead.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;* If &apos;&apos;c&apos;&apos; has expired, returns an empty &apos;&apos;shared_ptr&apos;&apos;.&#10;* Otherwise returns an owning reference to the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object &apos;&apos;c&apos;&apos;. The connection will be disconnected at the time the returned &apos;&apos;shared_ptr&apos;&apos; expires.</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;type&quot; except_tags=&quot;noindex&quot; fmt=&quot;index&quot;:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>257</size>
												<variant>2</variant>
												<string>This is a short introduction to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. There are also several complete (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|example programs:) that may be of interest to the beginner.&#10;&#10;!!!Signal programming&#10;&#10;Typically, signal programming in C++ is used to create named connections to member functions, so that when an emitter object emits a signal, that results in calling all connected functions on all connected &quot;receivers&quot;.&#10;&#10;Here is an example using Synapse:&#10;&#10;[@class button&#10;{&#10;public:&#10;    typedef struct clicked_(*clicked)(); //Define a Synapse signal.&#10;&#10;    void click()&#10;    {&#10;        synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;clicked&gt;(this); //Emit the &quot;clicked&quot; signal from &quot;this&quot;.&#10;    }&#10;};@]&#10;&#10;Synapse signals are specified by function pointer typedefs, identified by their return type (which is otherwise unused). Above, we define a signal called &apos;&apos;clicked&apos;&apos; which takes no arguments. If we need to define other signals, we would provide similar typedefs but use a return type other than &apos;&apos;clicked_&apos;&apos; (so they can be differentiated.)&#10;&#10;The member function &apos;&apos;click&apos;&apos; calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, passing the &apos;&apos;this&apos;&apos; pointer as the emitter. If any &apos;&apos;clicked&apos;&apos; connections exist, each connected function will be called at this time. We can continue the example by defining a &apos;&apos;window&apos;&apos; class, and create a Synapse connection that causes &apos;&apos;confirm()&apos;&apos; to get called when the &apos;&apos;button::clicked&apos;&apos; signal is emitted:&#10;&#10;[@class window&#10;{&#10;public:&#10;&#10;    void confirm();&#10;};&#10;&#10;....&#10;shared_ptr&lt;button&gt; emitter=make_shared&lt;button&gt;();&#10;shared_ptr&lt;window&gt; receiver=make_shared&lt;window&gt;();&#10;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button::clicked&gt;( emitter, receiver, &amp;window::confirm );&#10;emitter-&gt;click();&#10;....@]&#10;&#10;Above, calling &apos;&apos;click&apos;&apos; emits the signal &apos;&apos;clicked&apos;&apos;, which results in a call to &apos;&apos;receiver-&gt;confirm()&apos;&apos;. Naturally, had we created more connections, each target function would be called. In this particular case, the syntax used in the call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; takes the emitter (the &apos;&apos;button&apos;&apos;), the receiver (the &apos;&apos;window&apos;&apos;), and a member function to call on the receiver. The connection will persist until the emitter or the receiver object expires (&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; will lock the receiver before calling the connected function.)&#10;&#10;!!!Emitting signals from objects of 3rd-party types&#10;&#10;The use of Synapse in the previous example mimics the use of other signal programming libraries, but it does not demonstrate the main motivation behind the non-intrusive design of Synapse. More generally:&#10;&#10;* &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; does not require cooperation from the passed emitter object&apos;s type; any object of any type whatsoever can be passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;;&#10;* the &apos;&apos;receiver&apos;&apos; argument of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is optional: it&apos;s possible to connect any function that matches the call signature of the signal being connected;&#10;* if &apos;&apos;receiver&apos;&apos; is specified, it is passed as the first argument to the connected function, but other than that its only role is to allow Synapse to detect when it has expired, so that the connection itself can expire.&#10;&#10;This makes it possible to emit non-intrusively even if the emitter object is not built to support signals. For example, a function that processes a file can use the standard &apos;&apos;FILE&apos;&apos; pointer as a &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emitter to report on its progress:&#10;&#10;[@typedef struct report_progress_(*report_progress)(int);&#10;&#10;void process_file( FILE * f )&#10;{&#10;    for( int progress=0; !feof(f); )&#10;    {&#10;        ....&#10;        progress += fread(buf,1,nread,f);&#10;        synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;report_progress&gt;(f,progress);&#10;    }&#10;}@]&#10;&#10;Outside of &apos;&apos;process_file&apos;&apos; the &apos;&apos;report_progress&apos;&apos; signal can be connected to some user interface function that updates a progress bar. Using &apos;&apos;(:link www.qt.io|Qt:)&apos;&apos;, this could look like this:&#10;&#10;[@if( FILE * f=fopen(&quot;file.dat&quot;,&quot;rb&quot;) )&#10;{&#10;    (:link https://www.google.com/search?q=QProgressBar|QProgressBar:) pb(....);&#10;    shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;report_progress&gt;(f,&amp;pb,&amp;QProgressBar::setValue);&#10;    process_file(f);&#10;}@]&#10;&#10;!!!!Notes:&#10;&#10;* &apos;&apos;process_file&apos;&apos; is not coupled with &apos;&apos;QProgressBar&apos;&apos; or with any specific caller: the &apos;&apos;report_progress&apos;&apos; signal could be connected to a different function or not connected at all, in which case the call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; would be a no-op.&#10;* In this case &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is passed raw pointers for the emitter and the receiver argument, so it is not possible for Synapse to detect automatically if either the emtter or the receiver has expired. For this reason, the caller must manage the lifetime of the returned &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object to ensure that it does not persist beyond that time.&#10;&#10;For another example of calling &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; on an object of a 3rd-party type see &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;&#10;!!!Interoperability with other signal programming APIs&#10;&#10;&apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is great for breaking coupling between parts of a program that implement UI, and other parts that need to communicate with them. For example, a Qt program For example, if we want a &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; with them but ideally should not depend on the UI API used. extend the functionality of other signal programming APIs. Suppose we call &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; with a Qt object of type &apos;&apos;(:link https://www.google.com/search?q=QPushButton|QPushButton:)&apos;&apos;:&#10;&#10;[@//Define a (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) signal.&#10;typedef void QPushButton_clicked_(*QPushButton_clicked)();&#10;&#10;....&#10;QPushButton b;&#10;shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(&amp;b,f);@]&#10;&#10;Now we can call &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; &quot;manually&quot; to make the &apos;&apos;QPushButton&apos;&apos; emit our &apos;&apos;QPushButton_clicked&apos;&apos; signal (which in this case will call &apos;&apos;f&apos;&apos; as long as the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object has not expired):&#10;&#10;[@synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(&amp;b);@]&#10;&#10;As is the case with the previous &apos;&apos;FILE&apos;&apos; pointer example, due to the non-intrusive nature of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, emitting the &apos;&apos;QPushButton_clicked&apos;&apos; signal does not require cooperation from the &apos;&apos;QPushButton&apos;&apos; type itself.&#10;&#10;-&gt;&apos;&apos;Note: This technique can be used to define new types of signals for existing &apos;&apos;Qt&apos;&apos; types, which is not supported by the native Qt API (in Qt, to add custom signals to a button we must define a new type that derives from QPushButton, which then must be passed through the proprietary Qt Meta Object Compiler, which is difficult without qmake). For a complete example see &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;&apos;&apos;.&#10;&#10;We can also make the &apos;&apos;QPushButton&apos;&apos; call &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos; automatically when clicked by connecting its native &apos;&apos;QPushButton::clicked&apos;&apos; signal (using the &apos;&apos;Qt&apos;&apos; API) to &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;:&#10;&#10;[@(:link https://www.google.com/search?q=QObject|QObject:)::connect(&amp;b,&#10;    &amp;QPushButton::clicked,boost::bind(&amp;synapse::emit&lt;QPushButton_clicked&gt;,&amp;b);@]&#10;&#10;!!!Meta signals&#10;&#10;In the above example, even though clicking the &apos;&apos;QPushButton&apos;&apos; calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos; automatically, the setup was not automatic. This can be improved by using meta signals.&#10;&#10;Every time &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos; is called, the global &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits the special signal &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos;. A possible handler of this signal may be declared like this:&#10;&#10;[@void handle_QPushButton_clicked_connect( synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; c, unsigned flags );@]&#10;&#10;The first parameter, &apos;&apos;c&apos;&apos;, refers to the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object created by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos;. The second parameter is a combination of bits which depends on the circumstances under which the handler is invoked. In particular, the &apos;&apos;connecting&apos;&apos; bit is set when the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object is being created; the meta signal is also emitted just as the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object is expiring, in which case the &apos;&apos;connecting&apos;&apos; bit is not set.&#10;&#10;Regardless, the handler may use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to access the emitter object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;:&#10;&#10;[@void handle_QPushButton_clicked_connect( synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) &amp; c, unsigned flags )&#10;{&#10;    if( flags&amp;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|meta::connect_flags::connecting:) )&#10;    {&#10;        boost::shared_ptr&lt;QPushButton&gt; b=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QPushButton&gt;();&#10;        QMetaObject::Connection qc=QObject::connect(b.get(),&amp;QPushButton::clicked,&#10;            boost::bind(&amp;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;,b.get()));&#10;        c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)(qc);&#10;    }&#10;    else&#10;        QObject::disconnect(*c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QMetaObject::Connection&gt;());&#10;}@]&#10;&#10;Calling &apos;&apos;c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QPushButton&gt;&apos;&apos; returns the &apos;&apos;QPushButton&apos;&apos; object being passed to the call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&apos;&apos; which triggered our handler. Next, we use the &apos;&apos;Qt&apos;&apos; API to connect the &apos;&apos;Qt&apos;&apos;-native &apos;&apos;QPushButton::clicked&apos;&apos; signal to &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, storing the resulting &apos;&apos;Qt&apos;&apos; connection object into &apos;&apos;c&apos;&apos; using &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&apos;&apos; (which can be used to store a value of any type in &apos;&apos;c&apos;&apos;). When the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; expires (the &apos;&apos;else&apos;&apos; branch), we retrieve the &apos;&apos;Qt&apos;&apos; connection from the &apos;&apos;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; using &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&apos;&apos; and pass it to &apos;&apos;QObject::disconnect&apos;&apos;.&#10;&#10;All that remains is to connect the &apos;&apos;handle_QPushButton_clicked_connect&apos;&apos; function to the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. This can be done by a simple namespace-scope call to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; placed in the same compilation unit that defines the handler:&#10;&#10;[@auto meta_QPushButton_clicked=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt; &gt;(&#10;    synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)(),&amp;handle_QPushButton_clicked_connect);@]&#10;&#10;We can now directly pass &apos;&apos;QPushButton&apos;&apos; objects to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to install handlers for &apos;&apos;QPushButton_clicked&apos;&apos; to be invoked when buttons are clicked:&#10;&#10;[@QPushButton b1, b2;&#10;{&#10;    //Make two QPushButton_clicked (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)s: this also emits the&#10;    //synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt; signal twice,&#10;    //each time triggering our installed handler which connects the Qt-native&#10;    //signal QPushButton::clicked to synapse::emit&lt;QPushButton_clicked&gt;.&#10;    shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c1=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(&amp;b1,f1);&#10;    shared_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c2=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(&amp;b2,f2);&#10;    ....&#10;    //Until c1 and c2 expire clicking b1 calls f1 and clicking b2 calls f2.&#10;    ....&#10;}&#10;//At this point c1 and c2 have expired, emitting (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;&#10;//twice again, each time triggering our intalled handler to disconnect the Qt-native signal.@]&#10;&#10;This documentation includes two complete example programs that illustrate the use of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; handlers:&#10;&#10;* &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;, and&#10;* &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;&#10;!!!Emitter lifetime safety&#10;&#10;Because the emitter object passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; may have been destroyed by the time it is accessed by a handler of the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; signal, &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; can also take the emitter argument by &apos;&apos;weak_ptr&apos;&apos;:&#10;&#10;[@shared_ptr&lt;my_button&gt; b(new my_button);&#10;weak_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(b,f);@]&#10;&#10;In this case the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; retains a copy of the passed &apos;&apos;weak_ptr&apos;&apos; which will be locked by a later call to &apos;&apos;c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;my_button&gt;()&apos;&apos; to return a &apos;&apos;shared_ptr&apos;&apos; to the emitter. If instead &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; was given a raw pointer, the &apos;&apos;shared_ptr&apos;&apos; returned by &apos;&apos;c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;my_button&gt;()&apos;&apos; still points to the emitter object but does not keep it afloat.&#10;&#10;Note as well that if &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is passed a &apos;&apos;weak_ptr&apos;&apos; as either the emitter or the receiver argument, it returns a &apos;&apos;weak_ptr&lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&apos;&apos;, which can be used to detect when the connection object has expired (it will expire when either the receiver or the emitter expires). The returned weak reference can be passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to obtain an owning reference which can be used to disconnect at an earlier time, if needed.&#10;&#10;!!!Emitter type safety&#10;&#10;The &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; function template is type-safe: the type of the emitter object is captured at the time it is passed to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, and then &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; returns an empty &apos;&apos;shared_ptr&apos;&apos; if the type it is instantiated with is incompatible with the captured type.&#10;&#10;One complication with &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is that it is not aware of any possible implicit coversions if the emitter type is part of a class hierarchy. For example:&#10;&#10;[@boost::shared_ptr&lt;QPushButton&gt; b(....);&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)(synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;QPushButton_clicked&gt;(b,f));&#10;boost::shared_ptr&lt;QWidget&gt; w=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QWidget&gt;(); //fail@]&#10;&#10;We&apos;ve passed the emitter to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; as a &apos;&apos;QPushButton&apos;&apos;, and later—knowing that &apos;&apos;QWidget&apos;&apos; is a base class of &apos;&apos;QPushButton&apos;&apos;—we want to access it as a &apos;&apos;QWidget&apos;&apos;. Currently this is not supported; the only way to deal with this problem is to try the different base types:&#10;&#10;[@if( boost::shared_ptr&lt;QPushButton&gt; b=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QPushButton&gt;() )&#10;{&#10;    /* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) was given a QPushButton. */&#10;}&#10;else if( boost::shared_ptr&lt;QWidget&gt; w=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QWidget&gt;() )&#10;{&#10;    /* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) was given a QWidget. */&#10;}&#10;else if( boost::shared_ptr&lt;QObject&gt; o=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;QObject&gt;() )&#10;{&#10;    /* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) was given a QObject. */&#10;}&#10;else if( boost::shared_ptr&lt;void const&gt; p=c.(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;m&quot;:)&lt;void const&gt;() )&#10;{&#10;    /* (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:) was given some other type. */&#10;}&#10;else&#10;{&#10;    /* Because any type can be accessed as void const,&#10;        hitting this &quot;else&quot; branch means that the emitter has expired. */&#10;}@]&#10;&#10;Note however that &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; does handle const-ness correctly. For example, if &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; was passed a &apos;&apos;QPushButton&apos;&apos; emitter, it can be accessed as &apos;&apos;QPushButton&apos;&apos; and as &apos;&apos;QPushButton const&apos;&apos;, but if &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; was passed a &apos;&apos;QPushButton const&apos;&apos; then it can not be accessed as a &apos;&apos;QPushButton&apos;&apos;.&#10;&#10;!!!Blocking signals&#10;&#10;It is possible to block a specific signal for a specific emitter. While the signal is blocked, calls to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; are ignored:&#10;&#10;[@my_button b;&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b,f);&#10;{&#10;    boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; blk=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b);&#10;    synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b); //Doesn&apos;t call any handlers, button_clicked is blocked.&#10;}&#10;&#10;//Here blk has expired, unblocking the button_clicked signal for b.&#10;//The following call to emit will call the connected handlers.&#10;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b);@]&#10;&#10;In general, a signal will remain blocked for a given emitter until all &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; objects for that signal and that emitter have expired. Note that blocking a signal affects current as well as future connections:&#10;&#10;[@my_button b;&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; blk=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b);&#10;boost::shared_ptr&lt;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt; c=synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b,f);&#10;&#10;synapse::(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;button_clicked&gt;(&amp;b); //Doesn&apos;t call any handlers, button_clicked is blocked.@]&#10;&#10;In addition (similarly to &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;) there is a meta signal associated with &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;. When a specific signal for a specific emitter transitions from being unblocked to being blocked, the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; emits &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, passing &apos;&apos;true&apos;&apos; for its &apos;&apos;is_blocked&apos;&apos; argument. The signal is emitted again when the signal becomes unblocked and this time &apos;&apos;is_blocked&apos;&apos; is &apos;&apos;false&apos;&apos;. One possible use of &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is to automatically reflect the blocked state of the signal in some user interface; see &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;&#10;!!!Multi-threading support&#10;&#10;Please see (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:).&#10;&#10;!!!Header-only emit&#10;&#10;If no signals are ever connected, &apos;&apos;emit&apos;&apos; is a no-op. For this reason, if a user library calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; but does not call &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, and if the program that links the user library does not call &apos;&apos;connect&apos;&apos; either, there is no need to link the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; library. As an example, a low level library that emits signals similar to &apos;&apos;report_progress&apos;&apos; (see the &apos;&apos;FILE&apos;&apos; example earlier on this page) can do so without requiring a client program that doesn&apos;t care about them to link &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;—yet other client programs that do connect and handle the signals will &quot;just work&quot; without needing to recompile the low level library.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Description:&#10;&#10;Stores a copy of &apos;&apos;data&apos;&apos; into &apos;&apos;this&apos;&apos;. Use &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; to access it. &#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>41</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;Calls all function objects that are connected to the specified &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; from the emitter &apos;&apos;e&apos;&apos;, in the order in which they were connected by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; or &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, passing the specified arguments, subject to the connection lifetime/(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)ing restrictions.&#10;&#10;!!!!Returns:&#10;&#10;The count of the connected function objects that were called. (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;p&quot;:) that are currently (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|blocked:) are not included in the count returned by &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;&#10;!!!!Warning:&#10;&#10;It is the responsibility of the caller to ensure that the emitter object &apos;&apos;e&apos;&apos; does not expire before &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; returns, otherwise the behavior is undefined.&#10;&#10;(:include throws:)&#10;&#10;!!!!Notes:&#10;&#10; *Values returned by the (:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>|connected:) function objects are ignored.&#10;&#10;*If before &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; returns &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; is called on the same signal and the same emitter, any newly connected functions are not called during the same &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;*If before &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; returns a connection object expires, it may or may not get called during the same &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;.&#10;*If &apos;&apos;e&apos;&apos; is 0 &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; simply returns 0 without calling any functions. Because of this feature, if the emitter is held by a &apos;&apos;shared_ptr&apos;&apos; object &apos;&apos;sp&apos;&apos;, there is no harm in calling &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;Signal&gt;(sp.get(),....)&apos;&apos; even if &apos;&apos;sp&apos;&apos; is empty. Similarly, if the caller has a &apos;&apos;weak_ptr&apos;&apos; to the emitter object which has expired, calling &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&lt;Signal&gt;(wp.lock().get(),....) will simply return 0.&#10;* &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; takes its arguments by value. Use &apos;&apos;boost::ref&apos;&apos; to pass by reference.&#10;&#10;!!!!Header-only emit:&#10;&#10;If a program calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; but never calls &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos;, there is no need to link any Synapse objects.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Effects:&#10;&#10;The same as &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>(q)&apos;&apos;, except that it blocks and does not return until at least one signal was delivered.&#10;&#10;!!!!Returns:&#10;&#10;The total number of signals emitted (always greater than 1).</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>29</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;This template defines a signal that is emitted by the &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; every time a &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; object is created (or destroyed) connecting (or disconnecting) the specified &apos;&apos;Signal&apos;&apos;. This meta signal can be used to integrate &apos;&apos;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&apos;&apos; with a 3rd-party callback/signal API. For an example see &quot;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> mod=&quot;w&quot;:)&quot;.&#10;&#10;Connected handlers must take two arguments: &apos;&apos;c&apos;&apos; is the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; being created or destroyed, and &apos;&apos;flags&apos;&apos; is a combination of the bits defined in the &apos;&apos;connect_flags&apos;&apos; namespace:&#10;&#10;* the &apos;&apos;connecting&apos;&apos; bit is set if the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object is being created, and cleared if it&apos;s being destroyed;&#10;* the &apos;&apos;first_for_this_emitter&apos;&apos; bit is set if the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object is being created and it is the first &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; for the emitter passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;/&apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;;&#10;* the &apos;&apos;last_for_this_emitter&apos;&apos; bit is set if the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object is being destroyed and it is the last &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; for the emitter passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;/&apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-47</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:pagelist tags=&quot;hpp&quot; except_tags=&quot;noindex&quot; fmt=&quot;index&quot; sort_prefix=&quot;14&quot;:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-48</id>
													</shared_ptr>
												</weak_ptr>
												<size>11</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;&#10;!!!!Returns:&#10;&#10;A &apos;&apos;shared_ptr&apos;&apos; that points the emitter that was passed to an overload of the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; function template to get the &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; object.&#10;&#10;!!!!Notes:&#10;&#10;* An empty &apos;&apos;shared_ptr&apos;&apos; is returned if:&#10;** &apos;&apos;T&apos;&apos; does not match the static type of the emitter passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos;, or&#10;** the emitter was passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; as a &apos;&apos;shared/weak_ptr&apos;&apos; and it has expired.&#10;* If the emitter was passed to &apos;&apos;</string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>&apos;&apos; as a raw pointer, the returned &apos;&apos;shared_ptr&apos;&apos; points that emitter but does not (can not) keep it afloat.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:auto !!!:)&#10;&#10;(:include synopsis:)&#10;</string>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>throws</string>
								<shared_ptr>
									<id>54</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>45</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>!!!!Throws:&#10;&#10;Any exception emitted by one of the connected function objects, in which case the remaining function objects are not called.&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-47</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-48</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
							<pair>
								<string>synopsis</string>
								<shared_ptr>
									<id>55</id>
									<type>
										<string>reno_layer</string>
									</type>
									<object>
										<sorted>
											<size>45</size>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-5</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-7</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-8</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include def pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-10</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-11</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-12</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-13</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-14</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;        namespace meta&#10;        {&#10;(:include def pre_indent=&quot;12&quot;:)&#10;        }&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-15</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>`#include &lt;boost/synapse/block.hpp&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-17</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include decl:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-18</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-19</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-20</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-21</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include def:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-22</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;        namespace meta&#10;        {&#10;(:include decl pre_indent=&quot;12&quot;:)&#10;        }&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-23</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-24</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-25</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-27</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-28</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-29</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-30</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-31</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-32</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include decl:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-33</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include def pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-36</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-37</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-38</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-39</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-40</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-41</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-42</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include def:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-43</id>
													</shared_ptr>
												</weak_ptr>
												<size>15</size>
												<variant>2</variant>
												<string>(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-26</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-16</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-6</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;&#10;(:include </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string> synopsis:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-44</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-35</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-45</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-34</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include decl pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-46</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-9</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;        namespace meta&#10;        {&#10;(:include def pre_indent=&quot;12&quot;:)&#10;        }&#10;    }&#10;}@]&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-47</id>
													</shared_ptr>
												</weak_ptr>
												<size>0</size>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-48</id>
													</shared_ptr>
												</weak_ptr>
												<size>1</size>
												<variant>2</variant>
												<string>(:include decl:)&#10;</string>
											</pair>
											<pair>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<size>3</size>
												<variant>2</variant>
												<string>`#include &lt;(:link </string>
												<variant>1</variant>
												<weak_ptr>
													<expired>0</expired>
													<shared_ptr>
														<id>-49</id>
													</shared_ptr>
												</weak_ptr>
												<variant>2</variant>
												<string>:)&gt;&#10;&#10;[@namespace boost&#10;{&#10;    namespace synapse&#10;    {&#10;(:include api pre_indent=&quot;8&quot;:)&#10;    }&#10;}@]&#10;</string>
											</pair>
										</sorted>
									</object>
								</shared_ptr>
							</pair>
						</sorted>
					</object>
				</shared_ptr>
			</layers>
			<contexts>
				<shared_ptr>
					<id>56</id>
					<type>
						<string>reno_context_map</string>
					</type>
					<object>
						<contexts>
							<sorted>
								<size>45</size>
								<shared_ptr>
									<id>-5</id>
								</shared_ptr>
								<shared_ptr>
									<id>-6</id>
								</shared_ptr>
								<shared_ptr>
									<id>-7</id>
								</shared_ptr>
								<shared_ptr>
									<id>-8</id>
								</shared_ptr>
								<shared_ptr>
									<id>-9</id>
								</shared_ptr>
								<shared_ptr>
									<id>-10</id>
								</shared_ptr>
								<shared_ptr>
									<id>-11</id>
								</shared_ptr>
								<shared_ptr>
									<id>-12</id>
								</shared_ptr>
								<shared_ptr>
									<id>-13</id>
								</shared_ptr>
								<shared_ptr>
									<id>-14</id>
								</shared_ptr>
								<shared_ptr>
									<id>-15</id>
								</shared_ptr>
								<shared_ptr>
									<id>-16</id>
								</shared_ptr>
								<shared_ptr>
									<id>-17</id>
								</shared_ptr>
								<shared_ptr>
									<id>-18</id>
								</shared_ptr>
								<shared_ptr>
									<id>-19</id>
								</shared_ptr>
								<shared_ptr>
									<id>-20</id>
								</shared_ptr>
								<shared_ptr>
									<id>-21</id>
								</shared_ptr>
								<shared_ptr>
									<id>-22</id>
								</shared_ptr>
								<shared_ptr>
									<id>-23</id>
								</shared_ptr>
								<shared_ptr>
									<id>-24</id>
								</shared_ptr>
								<shared_ptr>
									<id>-25</id>
								</shared_ptr>
								<shared_ptr>
									<id>-26</id>
								</shared_ptr>
								<shared_ptr>
									<id>-27</id>
								</shared_ptr>
								<shared_ptr>
									<id>-28</id>
								</shared_ptr>
								<shared_ptr>
									<id>-29</id>
								</shared_ptr>
								<shared_ptr>
									<id>-30</id>
								</shared_ptr>
								<shared_ptr>
									<id>-31</id>
								</shared_ptr>
								<shared_ptr>
									<id>-32</id>
								</shared_ptr>
								<shared_ptr>
									<id>-33</id>
								</shared_ptr>
								<shared_ptr>
									<id>-34</id>
								</shared_ptr>
								<shared_ptr>
									<id>-35</id>
								</shared_ptr>
								<shared_ptr>
									<id>-36</id>
								</shared_ptr>
								<shared_ptr>
									<id>-37</id>
								</shared_ptr>
								<shared_ptr>
									<id>-38</id>
								</shared_ptr>
								<shared_ptr>
									<id>-39</id>
								</shared_ptr>
								<shared_ptr>
									<id>-40</id>
								</shared_ptr>
								<shared_ptr>
									<id>-41</id>
								</shared_ptr>
								<shared_ptr>
									<id>-42</id>
								</shared_ptr>
								<shared_ptr>
									<id>-43</id>
								</shared_ptr>
								<shared_ptr>
									<id>-44</id>
								</shared_ptr>
								<shared_ptr>
									<id>-45</id>
								</shared_ptr>
								<shared_ptr>
									<id>-46</id>
								</shared_ptr>
								<shared_ptr>
									<id>-47</id>
								</shared_ptr>
								<shared_ptr>
									<id>-48</id>
								</shared_ptr>
								<shared_ptr>
									<id>-49</id>
								</shared_ptr>
							</sorted>
						</contexts>
						<index>
							<sorted>
								<size>45</size>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-28</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-10</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-40</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-47</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-30</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-13</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-23</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-41</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-43</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-19</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-25</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-29</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>0</size>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>1</empty>
										</path>
									</file>
									<shared_ptr>
										<id>-38</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>9328BAB771DED321380C9470AFF8081ADFE2BC15FD5C0301FA6A5D356BB29C00</strong>
											<weak>3343537180</weak>
											<size>1364</size>
											<position>1093</position>
											<strong>1055A605649176372CD07175BD86932E171B19693E93E586FF80D07049BAC68F</strong>
											<weak>1358253096</weak>
											<size>1336</size>
											<position>23</position>
											<strong>FF986FDDCA3229867121CD0EC7455E73EE003E062BCC9F8FB4B161D18A236396</strong>
											<weak>2501201157</weak>
											<size>269</size>
											<position>717</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-21</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>9328BAB771DED321380C9470AFF8081ADFE2BC15FD5C0301FA6A5D356BB29C00</strong>
											<weak>3343537180</weak>
											<size>1364</size>
											<position>1093</position>
											<strong>1055A605649176372CD07175BD86932E171B19693E93E586FF80D07049BAC68F</strong>
											<weak>1358253096</weak>
											<size>1336</size>
											<position>23</position>
											<strong>0693A3806DF544D3052F144C6B870687B59C19327B4AE62E3CE9AA980A2920B3</strong>
											<weak>3167300470</weak>
											<size>169</size>
											<position>986</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-17</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>9328BAB771DED321380C9470AFF8081ADFE2BC15FD5C0301FA6A5D356BB29C00</strong>
											<weak>3343537180</weak>
											<size>1364</size>
											<position>1093</position>
											<strong>1055A605649176372CD07175BD86932E171B19693E93E586FF80D07049BAC68F</strong>
											<weak>1358253096</weak>
											<size>1336</size>
											<position>23</position>
											<strong>185064014AFA8DBCF93C49C269FE40A4E147A7ACCB87A5C442688A69CDB066B5</strong>
											<weak>570305580</weak>
											<size>171</size>
											<position>1155</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-32</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>9328BAB771DED321380C9470AFF8081ADFE2BC15FD5C0301FA6A5D356BB29C00</strong>
											<weak>3343537180</weak>
											<size>1364</size>
											<position>1093</position>
											<strong>1055A605649176372CD07175BD86932E171B19693E93E586FF80D07049BAC68F</strong>
											<weak>1358253096</weak>
											<size>1336</size>
											<position>23</position>
											<strong>9E2DAD7B5FD60650F9F549C6D9B2D6FA57EEB55BCBFB5182EEA13A721EB1B1C6</strong>
											<weak>1636776058</weak>
											<size>207</size>
											<position>510</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-42</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>08F7428EE8AE5D1F7E0F931D8A9E5A79B60AD1B0687A431DAB46F20ECBCB371F</strong>
											<weak>362800389</weak>
											<size>1543</size>
											<position>735</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\qt\qt_button.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-31</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>C36FA3453D59F802E18FCCA26A79598BFEA9BBCDE0665B23EAE3D12D874E812A</strong>
											<weak>1707194686</weak>
											<size>666</size>
											<position>422</position>
											<strong>3F58837DDDD7D7BFB418EC058E6608922BCFFA9395CF2B94F45712446736822B</strong>
											<weak>1926410570</weak>
											<size>638</size>
											<position>23</position>
											<strong>5D7E1E3B88F7A14D6EF7E4D935D88BA44EC13257AA433326ABBC20FE2BACD7B0</strong>
											<weak>1261320827</weak>
											<size>249</size>
											<position>380</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\block.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-14</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>B0AFBDC922702E0A33AEEC9133527D3CB2C69689AD6AB1FFC130CFFE337C7534</strong>
											<weak>3138398671</weak>
											<size>157</size>
											<position>460</position>
											<strong>0F9E501D75A90AC4DCA92D68FECA501AEAE96730BCF52BB996A0C46913B83996</strong>
											<weak>3925090779</weak>
											<size>129</size>
											<position>23</position>
											<strong>910621165CF3843ECC720AC64A23AB83E0387DE8BA0CCA7B6F7B91A4021060D1</strong>
											<weak>3820033803</weak>
											<size>83</size>
											<position>37</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\emit.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-44</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>EF31C60B9329DE3FC67E6E5188EC990CB3FA9F755209829FB941CFCB89C1263B</strong>
											<weak>1496066151</weak>
											<size>2600</size>
											<position>405</position>
											<strong>2B1E6A822EAECAD4AC29894C1FCBB083B3B7307C4768C3A4ADA7DB572D8E69DD</strong>
											<weak>2026971251</weak>
											<size>2572</size>
											<position>23</position>
											<strong>5FF1188B5FBFA13AE95C79E54127068B3D243E57E9FE8AAF55839B943F4F1E27</strong>
											<weak>1163676303</weak>
											<size>1792</size>
											<position>64</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connect.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-11</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>EF31C60B9329DE3FC67E6E5188EC990CB3FA9F755209829FB941CFCB89C1263B</strong>
											<weak>1496066151</weak>
											<size>2600</size>
											<position>405</position>
											<strong>2B1E6A822EAECAD4AC29894C1FCBB083B3B7307C4768C3A4ADA7DB572D8E69DD</strong>
											<weak>2026971251</weak>
											<size>2572</size>
											<position>23</position>
											<strong>8199B8F6D177A6C02D9EA061D6DE83D6B75A482F07AA664BA8A8602DC86B0244</strong>
											<weak>2880212539</weak>
											<size>549</size>
											<position>2014</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connect.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-46</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>5</size>
											<strong>EF31C60B9329DE3FC67E6E5188EC990CB3FA9F755209829FB941CFCB89C1263B</strong>
											<weak>1496066151</weak>
											<size>2600</size>
											<position>405</position>
											<strong>2B1E6A822EAECAD4AC29894C1FCBB083B3B7307C4768C3A4ADA7DB572D8E69DD</strong>
											<weak>2026971251</weak>
											<size>2572</size>
											<position>23</position>
											<strong>8199B8F6D177A6C02D9EA061D6DE83D6B75A482F07AA664BA8A8602DC86B0244</strong>
											<weak>2880212539</weak>
											<size>549</size>
											<position>2014</position>
											<strong>F55B4BA2CF2A574A5EE4E616F057B596E57D6243D337AA3D4C62F6CF462D0E4C</strong>
											<weak>2199539132</weak>
											<size>286</size>
											<position>46</position>
											<strong>CD33B81608FB6278E5F0CA7C54F94289FB1975BB004700CFEAA0E48E5CBEA35E</strong>
											<weak>104860928</weak>
											<size>44</size>
											<position>1</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connect.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-22</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>EF31C60B9329DE3FC67E6E5188EC990CB3FA9F755209829FB941CFCB89C1263B</strong>
											<weak>1496066151</weak>
											<size>2600</size>
											<position>405</position>
											<strong>2B1E6A822EAECAD4AC29894C1FCBB083B3B7307C4768C3A4ADA7DB572D8E69DD</strong>
											<weak>2026971251</weak>
											<size>2572</size>
											<position>23</position>
											<strong>17715869015C424D22A073452406365D186077C4AD1B71446E539DB33890646C</strong>
											<weak>1021588752</weak>
											<size>156</size>
											<position>1857</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connect.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-39</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>847ED929EE424A5DAE33775BDE064CFB67C16EC2C81067293649FE3D189B073F</strong>
											<weak>2494667264</weak>
											<size>3745</size>
											<position>643</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\qt\qt_meta_block.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-37</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>2F795947D471550A74E1CEE3463A459C20C7BA1AD0C1D671986446584EA2DC44</strong>
											<weak>3732413390</weak>
											<size>2415</size>
											<position>222</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\logger\logger.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-36</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>5F875D9AEA183876EA5BCA205A7FE13159C15D7172DC9E9AC8FA4F1270907553</strong>
											<weak>4043876558</weak>
											<size>1377</size>
											<position>222</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\callback_api\synapsify.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-7</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>4</size>
											<strong>7EA988ABB15DE727B4C55E553BB2055DF2F1EF6836B3EB59CD1A5F9B9C96895D</strong>
											<weak>1204734376</weak>
											<size>16342</size>
											<position>793</position>
											<strong>870022F4C5938A07287577490BF47280CC1D4EA6AEF7F7FA13AB44F5907BA902</strong>
											<weak>3654795700</weak>
											<size>16314</size>
											<position>23</position>
											<strong>F9FE180D635480736984D39CF51A73F5F7B2F4F9D8220B8FE4D1A5366D859C12</strong>
											<weak>2526584735</weak>
											<size>1611</size>
											<position>14178</position>
											<strong>3DE78F48F2221353AE50B85929C56AC7F5EF0EE9364332A4E71B7D1BABFC454E</strong>
											<weak>4248512970</weak>
											<size>182</size>
											<position>1231</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\src\thread_local_queue.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-45</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>5</size>
											<strong>7EA988ABB15DE727B4C55E553BB2055DF2F1EF6836B3EB59CD1A5F9B9C96895D</strong>
											<weak>1204734376</weak>
											<size>16342</size>
											<position>793</position>
											<strong>870022F4C5938A07287577490BF47280CC1D4EA6AEF7F7FA13AB44F5907BA902</strong>
											<weak>3654795700</weak>
											<size>16314</size>
											<position>23</position>
											<strong>F9FE180D635480736984D39CF51A73F5F7B2F4F9D8220B8FE4D1A5366D859C12</strong>
											<weak>2526584735</weak>
											<size>1611</size>
											<position>14178</position>
											<strong>65307D19154BE057A2D7F6CAA6A1F51FEE0926CCC5167E74F26AF75D1EB3F796</strong>
											<weak>4272630222</weak>
											<size>182</size>
											<position>1049</position>
											<strong>DEDF1FF46515F89B2D8A391940944DED4BF562E89C797EF5817864504D0204CB</strong>
											<weak>631842631</weak>
											<size>164</size>
											<position>1</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\src\thread_local_queue.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-18</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>5</size>
											<strong>7EA988ABB15DE727B4C55E553BB2055DF2F1EF6836B3EB59CD1A5F9B9C96895D</strong>
											<weak>1204734376</weak>
											<size>16342</size>
											<position>793</position>
											<strong>870022F4C5938A07287577490BF47280CC1D4EA6AEF7F7FA13AB44F5907BA902</strong>
											<weak>3654795700</weak>
											<size>16314</size>
											<position>23</position>
											<strong>F9FE180D635480736984D39CF51A73F5F7B2F4F9D8220B8FE4D1A5366D859C12</strong>
											<weak>2526584735</weak>
											<size>1611</size>
											<position>14178</position>
											<strong>E323986C471E09BD4BD7F95374B77B4106C5D949713261F3E9C4CEBA7F2878DA</strong>
											<weak>1864392306</weak>
											<size>339</size>
											<position>601</position>
											<strong>C6732855C088156D511D2D1A1E6F6DD17FEE8E42191D1B554FFB5C01379E3DF9</strong>
											<weak>4219296303</weak>
											<size>319</size>
											<position>21</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\src\thread_local_queue.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-24</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>4</size>
											<strong>7EA988ABB15DE727B4C55E553BB2055DF2F1EF6836B3EB59CD1A5F9B9C96895D</strong>
											<weak>1204734376</weak>
											<size>16342</size>
											<position>793</position>
											<strong>870022F4C5938A07287577490BF47280CC1D4EA6AEF7F7FA13AB44F5907BA902</strong>
											<weak>3654795700</weak>
											<size>16314</size>
											<position>23</position>
											<strong>F9FE180D635480736984D39CF51A73F5F7B2F4F9D8220B8FE4D1A5366D859C12</strong>
											<weak>2526584735</weak>
											<size>1611</size>
											<position>14178</position>
											<strong>55CDD0F9BCA8CD6951E0D1E20C010093B979F0DCB783A1927568DDF2B89F18E3</strong>
											<weak>35531192</weak>
											<size>184</size>
											<position>1413</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\src\thread_local_queue.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-12</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>B80A94A0A99B4B6BD92DE6478A83DFBC07112005C197E13A40E4AD0163A25761</strong>
											<weak>2307084574</weak>
											<size>1848</size>
											<position>675</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\qt\qt_custom_signals.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-5</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>EE925A185A514AE031555BD6988E9236F20833CD2F647E2F59D472ED05A7EA71</strong>
											<weak>3127568495</weak>
											<size>843</size>
											<position>222</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\blocker.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-49</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>CB334305EA5F00D522E05FE3E0E3EDEC6AFC340BA5E02BB7FB15C8F7A02BAF74</strong>
											<weak>2340181685</weak>
											<size>2243</size>
											<position>222</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-16</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>128715D9230240A8E2B644DB3C5F53B00D55B694FD1E816E42030DC29920AA8E</strong>
											<weak>2730984838</weak>
											<size>418</size>
											<position>477</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\thread_local_queue.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-34</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>56BF554524F22BC5B5C4F2A41A3D1F9341467BA96B6F75C9C193FAA5A2B79297</strong>
											<weak>1025875720</weak>
											<size>3369</size>
											<position>222</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\emit.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-35</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>7982393CAB22B16067BFA9B3156CC9BDADA9EE495819CE14E56FEF8CCCFBBF9E</strong>
											<weak>2710486261</weak>
											<size>2007</size>
											<position>353</position>
											<strong>E84DAE2774D4303FBAABA7209DE22071EC6D057A5DF7DCAF806CF10E1B6176AF</strong>
											<weak>1356641537</weak>
											<size>1979</size>
											<position>23</position>
											<strong>F90DFD460AABC9363EB7E8450EC8B4C74E1B8EDE601213133FC925F8D7ECB9B9</strong>
											<weak>1905502769</weak>
											<size>1933</size>
											<position>37</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\translate.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-20</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>3F054A2798BD7A49A4F13B2DC0B35FFE908F159DB7C3058EA318CA92E97DFBB3</strong>
											<weak>2943710097</weak>
											<size>1314</size>
											<position>1122</position>
											<strong>5B3778C26FEFAE4FF73168CD9CF40D987485D807FD746939CB98D391EC79B11C</strong>
											<weak>3601623965</weak>
											<size>1286</size>
											<position>23</position>
											<strong>EA5656125969D525ECB4D6B5A6B68A80A463FC3155238F19FC3A9AF8A6B4D374</strong>
											<weak>3474895969</weak>
											<size>622</size>
											<position>654</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\block.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-15</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>B95C26B84ADF1D874639CCD0A55F89EABB6F062C522E3A0BB0D3A2C030D96BB8</strong>
											<weak>2848284123</weak>
											<size>360</size>
											<position>422</position>
											<strong>FABECA297659F3A16F0D9C7A3827E5A556FD562286AD57DEE870EB96C481379F</strong>
											<weak>577918439</weak>
											<size>332</size>
											<position>23</position>
											<strong>29C4AA90E6292B0AFBA4C749F88054FD5EB21C3D403A4A606172580A32762AB0</strong>
											<weak>3067366167</weak>
											<size>286</size>
											<position>37</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\blocker.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-33</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>4</size>
											<strong>B95C26B84ADF1D874639CCD0A55F89EABB6F062C522E3A0BB0D3A2C030D96BB8</strong>
											<weak>2848284123</weak>
											<size>360</size>
											<position>422</position>
											<strong>FABECA297659F3A16F0D9C7A3827E5A556FD562286AD57DEE870EB96C481379F</strong>
											<weak>577918439</weak>
											<size>332</size>
											<position>23</position>
											<strong>29C4AA90E6292B0AFBA4C749F88054FD5EB21C3D403A4A606172580A32762AB0</strong>
											<weak>3067366167</weak>
											<size>286</size>
											<position>37</position>
											<strong>F67DCA4DD04A884B88C9E2C7EB4A9FF32CD91D3BE7FB2978ACC345C4BFFC5866</strong>
											<weak>603329297</weak>
											<size>62</size>
											<position>210</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\blocker.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-48</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>2E6BA8A6B14673B09376A14D42F8A8CF6E6CB843D09544FBA5F3512763C3B2C4</strong>
											<weak>3649614361</weak>
											<size>9137</size>
											<position>222</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connect.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-9</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>5DD2BB9435F95C7283F4A649AB8EF350370910A4FB3A357E158C2350A77B9DCD</strong>
											<weak>692812247</weak>
											<size>2222</size>
											<position>222</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\block.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-6</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>3</size>
											<strong>2FE74A047180F337E96F7FFEE8A56CB9E476E9C772366508BEE885B3D12B06DE</strong>
											<weak>1982380076</weak>
											<size>645</size>
											<position>414</position>
											<strong>B5CEB3EADBCAEE48073A60560D8D35E959668791C4E5545704B21E73E667E041</strong>
											<weak>454471736</weak>
											<size>617</size>
											<position>23</position>
											<strong>A733CD1695F2FF9359415D1DB59ABF392EC26BB770F538A22B40640E332E3F5D</strong>
											<weak>3523847528</weak>
											<size>571</size>
											<position>37</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\connection.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-8</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>32D33467B16B5BA958CC6615C7FC0E663A386FBA3F64655EB82D9C46FA1AAADE</strong>
											<weak>2240674033</weak>
											<size>7104</size>
											<position>222</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\include\boost\synapse\translate.hpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-26</id>
									</shared_ptr>
								</pair>
								<pair>
									<hook>
										<stream_hook_path>
											<size>1</size>
											<strong>CDE12538C11E298FBB8FAAD030BC27611CFD1B3FC2BD43FE982F435E90AA3BE1</strong>
											<weak>1393553026</weak>
											<size>3281</size>
											<position>473</position>
										</stream_hook_path>
									</hook>
									<file>
										<path>
											<empty>0</empty>
											<string>..\..\example\win\win_WindowProc.cpp</string>
											<type>0</type>
											<base>0</base>
										</path>
									</file>
									<shared_ptr>
										<id>-27</id>
									</shared_ptr>
								</pair>
							</sorted>
						</index>
					</object>
				</shared_ptr>
			</contexts>
			<index>
				<shared_ptr>
					<id>57</id>
					<type>
						<string>tag_index</string>
					</type>
					<object>
						<tag_index>
							<sorted>
								<size>33</size>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-5</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-7</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-8</id>
										</shared_ptr>
									</weak_ptr>
									<string>type</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-9</id>
										</shared_ptr>
									</weak_ptr>
									<string>header</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-10</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-11</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-12</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-14</id>
										</shared_ptr>
									</weak_ptr>
									<string>signal</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-15</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-16</id>
										</shared_ptr>
									</weak_ptr>
									<string>header</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-17</id>
										</shared_ptr>
									</weak_ptr>
									<string>function member</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-18</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-19</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-20</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-21</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-22</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-23</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-24</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-27</id>
										</shared_ptr>
									</weak_ptr>
									<string>example windows</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-31</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-33</id>
										</shared_ptr>
									</weak_ptr>
									<string>type</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-35</id>
										</shared_ptr>
									</weak_ptr>
									<string>header</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-36</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-37</id>
										</shared_ptr>
									</weak_ptr>
									<string>example</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-38</id>
										</shared_ptr>
									</weak_ptr>
									<string>noalso</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-40</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-41</id>
										</shared_ptr>
									</weak_ptr>
									<string>tutorial</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-42</id>
										</shared_ptr>
									</weak_ptr>
									<string>function member</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-44</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-45</id>
										</shared_ptr>
									</weak_ptr>
									<string>function</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-46</id>
										</shared_ptr>
									</weak_ptr>
									<string>signal</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-47</id>
										</shared_ptr>
									</weak_ptr>
									<string>noindex</string>
								</pair>
								<pair>
									<weak_ptr>
										<expired>0</expired>
										<shared_ptr>
											<id>-48</id>
										</shared_ptr>
									</weak_ptr>
									<string>function member</string>
								</pair>
							</sorted>
						</tag_index>
					</object>
				</shared_ptr>
			</index>
		</reno_project>
	</object>
</shared_ptr>
